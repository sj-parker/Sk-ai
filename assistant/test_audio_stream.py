#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
"""

import asyncio
import websockets
import json
import base64
import wave
import io
import time
import threading

async def test_audio_stream():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ws_host = '192.168.1.4'  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à IP
    ws_port = 31995
    
    try:
        print(f"üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞ –Ω–∞ ws://{ws_host}:{ws_port}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        async with websockets.connect(f"ws://{ws_host}:{ws_port}") as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
            ping_message = {
                'type': 'ping',
                'timestamp': time.time()
            }
            await websocket.send(json.dumps(ping_message))
            print("üì§ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ñ–¥–µ–º pong
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                data = json.loads(response)
                if data.get('type') == 'pong':
                    print("üì• Pong –ø–æ–ª—É—á–µ–Ω - —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è pong")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ (—Å–∏–Ω—É—Å–æ–∏–¥–∞ 440 –ì—Ü)
            print("üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ...")
            sample_rate = 48000
            duration = 2  # 2 —Å–µ–∫—É–Ω–¥—ã
            frequency = 440  # A4
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É
            import numpy as np
            t = np.linspace(0, duration, int(sample_rate * duration), False)
            audio_data = np.sin(2 * np.pi * frequency * t)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit PCM
            audio_data = (audio_data * 32767).astype(np.int16)
            
            # –°–æ–∑–¥–∞–µ–º WAV –≤ –ø–∞–º—è—Ç–∏
            wav_buffer = io.BytesIO()
            with wave.open(wav_buffer, 'wb') as wav_file:
                wav_file.setnchannels(1)  # –º–æ–Ω–æ
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(audio_data.tobytes())
            
            wav_data = wav_buffer.getvalue()
            audio_b64 = base64.b64encode(wav_data).decode('utf-8')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
            audio_message = {
                'type': 'audio',
                'data': audio_b64,
                'sample_rate': sample_rate,
                'timestamp': time.time()
            }
            
            await websocket.send(json.dumps(audio_message))
            print(f"üéµ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({len(wav_data)} –±–∞–π—Ç)")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(3)
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_audio_server_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        from audio_stream_server import audio_server
        
        print("üéµ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        server_task = asyncio.create_task(audio_server.start_server())
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        await asyncio.sleep(2)
        
        if audio_server.is_running:
            print("‚úÖ –ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
            import numpy as np
            sample_rate = 48000
            duration = 1
            frequency = 440
            
            t = np.linspace(0, duration, int(sample_rate * duration), False)
            audio_data = np.sin(2 * np.pi * frequency * t)
            audio_data = (audio_data * 32767).astype(np.int16)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
            await audio_server.broadcast_audio(audio_data.tobytes(), sample_rate)
            print("üéµ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(2)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            await audio_server.stop_server()
            print("üõë –ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        else:
            print("‚ùå –ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    print("üéµ –¢–µ—Å—Ç –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞")
    print("=" * 50)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç
    test_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (1 - –∫–ª–∏–µ–Ω—Ç, 2 - —Å–µ—Ä–≤–µ—Ä): ").strip()
    
    if test_type == "1":
        asyncio.run(test_audio_stream())
    elif test_type == "2":
        asyncio.run(test_audio_server_direct())
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä") 