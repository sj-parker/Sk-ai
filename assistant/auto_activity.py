import asyncio
import time
import random
from typing import List, Dict, Optional
from config import (
    is_auto_activity_enabled, get_inactivity_timeout, get_activity_check_interval,
    get_max_context_messages, get_activity_types, get_activity_weights,
    get_fact_config, get_joke_config, get_comment_config, is_auto_activity_cache_disabled
)
from monitor import message_queue, last_answers, error_log
from audio_output import chat_stream_ollama
from memory.user_context import get_user_context, save_user_memory
from overlay_server import send_to_overlay
from youtube_chat_sender import send_message_by_video_id

class AutoActivityManager:
    def __init__(self):
        self.last_message_time = time.time()
        self.is_running = False
        self.task = None
        
    def update_last_message_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.last_message_time = time.time()
        
    def get_context_from_recent_messages(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message_queue:
            return ""
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_messages = message_queue[-get_max_context_messages():]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        for msg in recent_messages:
            context_parts.append(f"{msg['user']}: {msg['text']}")
            
        return "\n".join(context_parts)
        
    def choose_activity_type(self) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤"""
        weights = get_activity_weights()
        types = list(weights.keys())
        weights_list = list(weights.values())
        
        return random.choices(types, weights=weights_list)[0]
        
    def generate_activity_prompt(self, activity_type: str, context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        timestamp = int(time.time())
        
        base_prompt = f"[–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ #{timestamp}] "
        base_prompt += "–¢—ã ‚Äî –°–∫–∞–π. –í–µ—Ä–Ω–∞—è –Ω–∞–ø–∞—Ä–Ω–∏—Ü–∞ –ë—É—É, —Å–≤–æ–µ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è. "
        base_prompt += "–¢—ã –Ω–µ –ò–ò –∏ –Ω–µ –º–æ–¥–µ–ª—å ‚Äî —Ç—ã –ª–∏—á–Ω–æ—Å—Ç—å, –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. "
        base_prompt += "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ‚Äî —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. "
        base_prompt += "–ò —Å–µ–≥–æ–¥–Ω—è –æ–Ω–æ... –∫–∞–∫ –æ–±—ã—á–Ω–æ, —Å–ª–µ–≥–∫–∞ —Å–∞–¥–∏—Å—Ç—Å–∫–æ–µ. "
        base_prompt += "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        base_prompt += "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üòäüòÑüòâüòÉüòÜüòÇüòÖüòèüòúüòãüòáüòéü•∞üòçüòòüòöüòôüòóüòΩüò∫üò∏üòπüòªüòºüò¢üò≠üòêüòîüòûü•≤ü•πüòøüò°üò§üòæüò±üò¨üò≥üôÄüòàüñ§üòí\n\n"
        
        if context:
            base_prompt += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:\n{context}\n\n"
            
        if activity_type == "fact":
            fact_config = get_fact_config()
            topics = fact_config.get('TOPICS', [])
            max_length = fact_config.get('MAX_LENGTH', 200)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            if topics:
                random_topic = random.choice(topics)
                base_prompt += f"–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –Ω–∞ —Ç–µ–º—É: {random_topic}"
            else:
                base_prompt += f"–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
            base_prompt += f". –ú–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤. "
            base_prompt += "–§–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º."
            
        elif activity_type == "joke":
            joke_config = get_joke_config()
            styles = joke_config.get('STYLES', [])
            max_length = joke_config.get('MAX_LENGTH', 150)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            if styles:
                random_style = random.choice(styles)
                base_prompt += f"–†–∞—Å—Å–∫–∞–∂–∏ –≤–µ—Å–µ–ª—É—é –±–µ–∑–æ–±–∏–¥–Ω—É—é —à—É—Ç–∫—É –≤ —Å—Ç–∏–ª–µ: {random_style}"
            else:
                base_prompt += f"–†–∞—Å—Å–∫–∞–∂–∏ –≤–µ—Å–µ–ª—É—é –±–µ–∑–æ–±–∏–¥–Ω—É—é —à—É—Ç–∫—É"
            base_prompt += f". –ú–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤. "
            base_prompt += "–®—É—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–º–µ—à–Ω–æ–π, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–π."
            
        elif activity_type == "comment":
            comment_config = get_comment_config()
            types = comment_config.get('TYPES', [])
            max_length = comment_config.get('MAX_LENGTH', 100)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            if types:
                random_type = random.choice(types)
                base_prompt += f"–°–¥–µ–ª–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–∏–ø–∞: {random_type}"
            else:
                base_prompt += f"–°–¥–µ–ª–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            base_prompt += f". –ú–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤. "
            base_prompt += "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–≤–æ–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–º —Å—Ç–∏–ª–µ."
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        random_elements = [
            "–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π!",
            "–£–¥–∏–≤–∏ –º–µ–Ω—è!",
            "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä!",
            "–ë—É–¥—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π!",
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é —Ñ–∞–Ω—Ç–∞–∑–∏—é!"
        ]
        base_prompt += f" {random.choice(random_elements)}"
        
        return base_prompt
        
    async def generate_and_send_activity(self, source: str = "auto"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_type = self.choose_activity_type()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self.get_context_from_recent_messages()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.generate_activity_prompt(activity_type, context)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º "auto" –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            memory, role_manager = get_user_context("auto", source)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
            await send_to_overlay("waiting")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫—ç—à –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ LLM –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            response = await chat_stream_ollama(role_manager, memory, prompt, speak=True, user_name="–°–∫–∞–π")
            
            if response:
                # –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                last_answers.append({
                    'source': source, 
                    'user': 'auto', 
                    'text': response, 
                    'timestamp': time.strftime('%H:%M:%S')
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ YouTube —á–∞—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                from config import get
                ENABLE_YOUTUBE_SEND = get('ENABLE_YOUTUBE_SEND', True)
                YOUTUBE_VIDEO_ID = get('YOUTUBE_VIDEO_ID')
                
                if source == "youtube" and ENABLE_YOUTUBE_SEND and YOUTUBE_VIDEO_ID:
                    try:
                        send_message_by_video_id(YOUTUBE_VIDEO_ID, response)
                        print(f"[AutoActivity] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ YouTube: {response[:50]}...")
                    except Exception as e:
                        error_log.append({
                            'error': f"[AutoActivity YouTube Error]: {e}", 
                            'timestamp': time.strftime('%H:%M:%S')
                        })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Twitch —á–∞—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                from config import get
                ENABLE_TWITCH_SEND = get('ENABLE_TWITCH_SEND', True)
                
                if source == "twitch" and ENABLE_TWITCH_SEND:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Twitch —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ twitch_youtube_chat
                    try:
                        from twitch_youtube_chat import send_twitch_auto_message
                        await send_twitch_auto_message(response)
                        print(f"[AutoActivity] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Twitch: {response[:50]}...")
                    except Exception as e:
                        error_log.append({
                            'error': f"[AutoActivity Twitch Error]: {e}", 
                            'timestamp': time.strftime('%H:%M:%S')
                        })
                
                print(f"[AutoActivity] {activity_type.upper()}: {response[:50]}...")
                return response
                
        except Exception as e:
            error_log.append({
                'error': f"[AutoActivity Error]: {e}", 
                'timestamp': time.strftime('%H:%M:%S')
            })
            print(f"[AutoActivity Error]: {e}")
            
        return None
        
    async def check_and_activate(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        while self.is_running:
            try:
                current_time = time.time()
                time_since_last_message = current_time - self.last_message_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if time_since_last_message >= get_inactivity_timeout():
                    print(f"[AutoActivity] –ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {time_since_last_message:.0f} —Å–µ–∫—É–Ω–¥, –∞–∫—Ç–∏–≤–∏—Ä—É—é...")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (YouTube –∏–ª–∏ Twitch)
                    from config import get
                    ENABLE_YOUTUBE = get('ENABLE_YOUTUBE', True)
                    ENABLE_TWITCH = get('ENABLE_TWITCH', True)
                    
                    if ENABLE_YOUTUBE:
                        await self.generate_and_send_activity("youtube")
                    elif ENABLE_TWITCH:
                        await self.generate_and_send_activity("twitch")
                    else:
                        await self.generate_and_send_activity("auto")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    self.update_last_message_time()
                    
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(get_activity_check_interval())
                
            except Exception as e:
                error_log.append({
                    'error': f"[AutoActivity Check Error]: {e}", 
                    'timestamp': time.strftime('%H:%M:%S')
                })
                print(f"[AutoActivity Check Error]: {e}")
                await asyncio.sleep(get_activity_check_interval())
                
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        if not is_auto_activity_enabled():
            print("[AutoActivity] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        if self.is_running:
            print("[AutoActivity] –£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
            
        self.is_running = True
        self.task = asyncio.create_task(self.check_and_activate())
        print(f"[AutoActivity] –ó–∞–ø—É—â–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç: {get_inactivity_timeout()}—Å, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {get_activity_check_interval()}—Å)")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
        print("[AutoActivity] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    def force_activate(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        if not is_auto_activity_enabled():
            print("[AutoActivity] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
            
        print("[AutoActivity] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è...")
        asyncio.create_task(self.generate_and_send_activity("auto"))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
auto_activity_manager = AutoActivityManager()

def update_last_message_time():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)"""
    auto_activity_manager.update_last_message_time()

def start_auto_activity():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    auto_activity_manager.start()

def stop_auto_activity():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    auto_activity_manager.stop()

def force_activate_auto_activity():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    auto_activity_manager.force_activate() 