import asyncio
import websockets
import json
import base64
import wave
import io
import threading
import time
from typing import Set
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AudioStreamServer:
    def __init__(self, host='0.0.0.0', port=31995):
        self.host = host
        self.port = port
        self.clients: Set = set()
        self.server = None
        self.is_running = False
        
    async def register_client(self, websocket):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        logger.info(f"üéµ –ê—É–¥–∏–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
        
    async def unregister_client(self, websocket):
        """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.discard(websocket)
        logger.info(f"üéµ –ê—É–¥–∏–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
        
    async def broadcast_audio(self, audio_data: bytes, sample_rate: int = 48000):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.clients:
            logger.warning("üéµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            wav_buffer = io.BytesIO()
            with wave.open(wav_buffer, 'wb') as wav_file:
                wav_file.setnchannels(1)  # –º–æ–Ω–æ
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(sample_rate)
                wav_file.writeframes(audio_data)
            
            wav_data = wav_buffer.getvalue()
            audio_b64 = base64.b64encode(wav_data).decode('utf-8')
            
            message = {
                'type': 'audio',
                'data': audio_b64,
                'sample_rate': sample_rate,
                'timestamp': time.time()
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await asyncio.gather(
                *[client.send(json.dumps(message)) for client in self.clients],
                return_exceptions=True
            )
            logger.info(f"üéµ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(self.clients)} –∫–ª–∏–µ–Ω—Ç–∞–º ({len(audio_data)} –±–∞–π—Ç)")
            
        except Exception as e:
            logger.error(f"üéµ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
        
    async def handle_client(self, websocket):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.register_client(websocket)
        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    if data.get('type') == 'ping':
                        await websocket.send(json.dumps({
                            'type': 'pong',
                            'timestamp': data.get('timestamp')
                        }))
                        logger.debug("üéµ –ü–æ–ª—É—á–µ–Ω ping, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω pong")
                except json.JSONDecodeError:
                    logger.warning(f"üéµ –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message}")
        except websockets.exceptions.ConnectionClosed:
            pass
        except Exception as e:
            logger.error(f"üéµ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            await self.unregister_client(websocket)
            
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä"""
        if self.is_running:
            logger.warning("üéµ –ê—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        try:
            self.server = await websockets.serve(
                self.handle_client,
                self.host,
                self.port
            )
            self.is_running = True
            logger.info(f"üéµ –ê—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{self.host}:{self.port}")
        except Exception as e:
            logger.error(f"üéµ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise

    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä"""
        if self.server:
            self.server.close()
            await self.server.wait_closed()
            self.is_running = False
            logger.info("üéµ –ê—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
audio_server = AudioStreamServer()

async def start_audio_stream():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä"""
    await audio_server.start_server()

def start_audio_stream_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start_audio_stream())

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    start_audio_stream_thread() 