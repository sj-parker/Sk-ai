import asyncio
import websockets
import socket
from monitor import module_status, error_log
import time
import json

connected_clients = set()
text_overlay_clients = set()
vrm_clients = set()  # –ù–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è VRM –∫–ª–∏–µ–Ω—Ç–æ–≤
server_ref = None
text_server_ref = None

def find_free_port():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', 0))
    port = s.getsockname()[1]
    s.close()
    return port

async def handler(websocket):
    connected_clients.add(websocket)
    print(f"üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(connected_clients)}")
    try:
        async for message in websocket:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
            try:
                data = json.loads(message)
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                if data.get('type') == 'vrm_client':
                    # –≠—Ç–æ VRM –∫–ª–∏–µ–Ω—Ç
                    vrm_clients.add(websocket)
                    print(f"üé≠ VRM –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ VRM –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(vrm_clients)}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    await websocket.send(json.dumps({
                        'type': 'client_ack',
                        'client': data.get('client'),
                        'message': 'VRM –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
                    }))
                elif data.get('type') == 'ping':
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                    await websocket.send(json.dumps({
                        'type': 'pong',
                        'timestamp': data.get('timestamp')
                    }))
                    print(f"üèì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω pong –∫–ª–∏–µ–Ω—Ç—É")
                elif data.get('type') in ('pose_control', 'camera_control', 'light_control'):
                    # –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VRM-–∫–ª–∏–µ–Ω—Ç–∞–º
                    await send_to_vrm(data)
                else:
                    print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {data.get('type')}")
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                # –û–±—ã—á–Ω—ã–π overlay –∫–ª–∏–µ–Ω—Ç
                pass
    except websockets.exceptions.ConnectionClosed:
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handler: {e}")
    finally:
        connected_clients.remove(websocket)
        vrm_clients.discard(websocket)
        print(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(connected_clients)}")

async def text_handler(websocket):
    print("Text overlay client connected")
    text_overlay_clients.add(websocket)
    try:
        await websocket.wait_closed()
    finally:
        print("Text overlay client disconnected")
        text_overlay_clients.remove(websocket)

async def broadcast(message: str):
    # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
    try:
        json.loads(message)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ message ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON
    except Exception:
        print(f"[WARN] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–µ-JSON —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return
    if connected_clients:
        await asyncio.gather(*(ws.send(message) for ws in connected_clients))

async def broadcast_text(message: str):
    print(f"[DEBUG] Broadcasting to {len(text_overlay_clients)} clients: {message!r}")
    if text_overlay_clients:
        await asyncio.gather(*(ws.send(message) for ws in text_overlay_clients))

async def broadcast_to_vrm(message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º VRM –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if vrm_clients:
        message_str = json.dumps(message)
        await asyncio.gather(*(ws.send(message_str) for ws in vrm_clients))

async def send_to_overlay(message: str):
    await broadcast(message)

async def send_text_to_overlay(message: str):
    await broadcast_text(message)

async def send_to_vrm(message: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ VRM"""
    await broadcast_to_vrm(message)

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VRM
async def send_emotion_to_vrm(emotion: str, intensity: float = 1.0, duration: int = 2000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —ç–º–æ—Ü–∏–∏ –≤ VRM"""
    await send_to_vrm({
        'type': 'emotion',
        'emotion': emotion,
        'intensity': intensity,
        'duration': duration
    })

async def send_animation_to_vrm(animation: str, duration: int = 5000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ VRM"""
    await send_to_vrm({
        'type': 'animation',
        'animation': animation,
        'duration': duration
    })

async def send_status_to_vrm(status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ VRM"""
    await send_to_vrm({
        'type': 'status',
        'status': status
    })

async def send_speech_to_vrm(is_speaking: bool, text: str = ""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—á–∏ –≤ VRM"""
    await send_to_vrm({
        'type': 'speech',
        'isSpeaking': is_speaking,
        'text': text
    })

async def send_text_to_vrm(text: str, duration: int = 5000):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ VRM"""
    await send_to_vrm({
        'type': 'text',
        'text': text,
        'duration': duration
    })

async def start_overlay_server(port, host='0.0.0.0', text_port=None):
    global server_ref, text_server_ref
    if server_ref is not None:
        print(f"[Overlay] –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    try:
        print(f"üñºÔ∏è Overlay —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{host}:{port}")
        server_ref = await websockets.serve(handler, host, port)
        module_status['overlay'] = True
        if text_port:
            print(f"üìù Text Overlay —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{host}:{text_port}")
            text_server_ref = await websockets.serve(text_handler, host, text_port)
            module_status['text_overlay'] = True
        print(f"[DEBUG] WebSocket —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        error_log.append({'error': f'[Overlay Error]: {e}', 'timestamp': time.strftime('%H:%M:%S')})
        module_status['overlay'] = False
        module_status['text_overlay'] = False

async def stop_overlay_server():
    global server_ref, text_server_ref
    if server_ref:
        print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º overlay —Å–µ—Ä–≤–µ—Ä")
        server_ref.close()
        await server_ref.wait_closed()
        server_ref = None
        module_status['overlay'] = False
    if text_server_ref:
        print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º text overlay —Å–µ—Ä–≤–µ—Ä")
        text_server_ref.close()
        await text_server_ref.wait_closed()
        text_server_ref = None
        module_status['text_overlay'] = False

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if __name__ == "__main__":
    import sys
    import os
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    try:
        from config import get
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        ws_port = get('OVERLAY_WS_PORT', 31992)
        ws_host = get('OVERLAY_WS_HOST', 'localhost')
        text_ws_port = get('TEXT_OVERLAY_WS_PORT', 31993)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        print(f"üì° –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ws://{ws_host}:{ws_port}")
        print(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: ws://{ws_host}:{text_ws_port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
        loop = asyncio.get_event_loop()
        loop.run_until_complete(start_overlay_server(ws_port, ws_host, text_ws_port))
        
        print("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –°–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–º–∏
        try:
            loop.run_forever()
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            loop.run_until_complete(stop_overlay_server())
            loop.close()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ config.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
