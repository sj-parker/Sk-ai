from multiprocessing import Process
import asyncio
import threading
import os
import glob
import json
import time
import logging

from recognize_from_microphone import recognize_from_microphone_async
from audio_output import chat_stream_ollama
from telegram_bot import run_telegram_bot
from overlay_server import start_overlay_server, find_free_port, send_text_to_overlay, send_to_overlay
from web_overlay.web_server import app as overlay_app
from memory.user_context import get_user_context, save_user_memory, save_persistent_memory
from twitch_youtube_chat import run_all_chats
from monitor import start_monitor_thread, error_log, module_status, sanitize_user_input
from config import get, check_required_config
from ocr_module import start_ocr_monitoring, stop_ocr_monitoring
from triggers import contains_trigger, is_mention_required
from auto_activity import start_auto_activity, stop_auto_activity

# –ò–º–ø–æ—Ä—Ç –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä–∞
try:
    from audio_stream_server import start_audio_stream
    AUDIO_STREAM_AVAILABLE = True
    print("[AUDIO STREAM] –ú–æ–¥—É–ª—å –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    AUDIO_STREAM_AVAILABLE = False
    print(f"[AUDIO STREAM] –ú–æ–¥—É–ª—å –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_config = get('LOGGING', {})
    log_level = getattr(logging, log_config.get('level', 'INFO').upper())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    if not log_config.get('telegram_debug', False):
        logging.getLogger('telegram').setLevel(logging.WARNING)
        logging.getLogger('httpx').setLevel(logging.WARNING)
        logging.getLogger('httpcore').setLevel(logging.WARNING)
    
    if not log_config.get('websocket_debug', False):
        logging.getLogger('websockets').setLevel(logging.WARNING)
    
    if not log_config.get('http_debug', False):
        logging.getLogger('werkzeug').setLevel(logging.WARNING)
        logging.getLogger('urllib3').setLevel(logging.WARNING)

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
memory, role_manager = get_user_context("local", 'local')

# –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
overlay_ws_host = get('OVERLAY_WS_HOST', '0.0.0.0')
overlay_ws_port = get('OVERLAY_WS_PORT', 31992)
overlay_client_host = get('OVERLAY_CLIENT_HOST', '192.168.1.4')
overlay_app.config['OVERLAY_WS_PORT'] = overlay_ws_port  # –¥–ª—è index.html
overlay_app.config['OVERLAY_WS_HOST'] = overlay_ws_host # –¥–ª—è index.html
overlay_app.config['OVERLAY_CLIENT_HOST'] = overlay_client_host # –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–±—Ä–∞—É–∑–µ—Ä–∞)
overlay_app.config['TEXT_OVERLAY_WS_PORT'] = overlay_ws_port + 1  # –¥–ª—è text_overlay.html

def run_overlay_web():
    host = get('OVERLAY_HOST', '0.0.0.0')
    port = get('OVERLAY_PORT', 31991)
    overlay_app.run(host=host, port=port)

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_overlay_web, daemon=True).start()

async def run_local_chat():
    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket overlay-—Å–µ—Ä–≤–µ—Ä
    overlay_task = asyncio.create_task(start_overlay_server(overlay_ws_port, host=overlay_ws_host, text_port=overlay_ws_port + 1))
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await asyncio.sleep(1)

    print("üß† –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ...")
    try:
        while True:
            user_text = await recognize_from_microphone_async()
            if user_text:
                user_text = sanitize_user_input(user_text)
                if is_mention_required('local_voice') and not contains_trigger(user_text):
                    print("[–§–∏–ª—å—Ç—Ä]: –ù–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –≤–≤–æ–¥–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
                    continue
                print(f"\n[–í—ã —Å–∫–∞–∑–∞–ª–∏]: {user_text}")
                await send_to_overlay("waiting")
                
                # –í—ã–±–∏—Ä–∞–µ–º –±—ç–∫–µ–Ω–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                llm_backend = get('LLM', {}).get('backend', 'ollama')
                if llm_backend == 'llamacpp':
                    from audio_output import chat_stream_llamacpp
                    llm_config = get('LLM', {}).get('llamacpp', {})
                    await chat_stream_llamacpp(
                        role_manager, 
                        memory, 
                        user_text,
                        model_path=llm_config.get('model_path'),
                        speak=True
                    )
                else:
                    from audio_output import chat_stream_ollama
                    ollama_config = get('LLM', {}).get('ollama', {})
                    await chat_stream_ollama(
                        role_manager, 
                        memory, 
                        user_text,
                        model_name=ollama_config.get('model', 'gemma3n:e2b'),
                        speak=True,
                        user_name="–ë—É—É"
                    )
            else:
                print("\n[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å]")
    except asyncio.CancelledError:
        print("\n[–õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]")
    finally:
        save_user_memory("local")

async def main_async():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    audio_task = None
    if AUDIO_STREAM_AVAILABLE:
        audio_task = asyncio.create_task(start_audio_stream())
        print("[AUDIO STREAM] –ê—É–¥–∏–æ —Å—Ç—Ä–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    start_auto_activity()
    print("[AUTO ACTIVITY] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–∞")
    
    await asyncio.gather(
        run_local_chat(),
        run_all_chats(),
    )

def telegram_proc():
    try:
        print('[MAIN] Telegram process: —Å—Ç–∞—Ä—Ç')
        module_status['telegram'] = True
        run_telegram_bot()
        print('[MAIN] Telegram process: –∑–∞–≤–µ—Ä—à—ë–Ω')
    except Exception as e:
        print(f'[TelegramBot Error]: {e}')
        error_log.append({'error': f'[TelegramBot Error]: {e}', 'timestamp': time.strftime('%H:%M:%S')})
        module_status['telegram'] = False

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    check_required_config()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    ENABLE_TELEGRAM = get('ENABLE_TELEGRAM', True)
    ENABLE_SPEECH_RECOGNITION = get('ENABLE_SPEECH_RECOGNITION', True)
    ENABLE_OCR = get('ENABLE_OCR', True)
    p = None
    if ENABLE_TELEGRAM:
        print('[MAIN] –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ Telegram')
        p = Process(target=telegram_proc)
        p.start()
        print('[MAIN] –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Telegram')
    else:
        print('[MAIN] Telegram –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥.')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –º–æ–¥—É–ª—å, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if ENABLE_OCR:
        print('[MAIN] –ó–∞–ø—É—Å–∫ OCR –º–æ–¥—É–ª—è')
        ocr_source = get('OCR_SOURCE', 'screen')
        ocr_interval = get('OCR_INTERVAL', 5)
        start_ocr_monitoring(ocr_source, ocr_interval)
    else:
        print('[MAIN] OCR –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥.')
    
    try:
        start_monitor_thread()
        
        if ENABLE_SPEECH_RECOGNITION:
            asyncio.run(main_async())
        else:
            print('[MAIN] –ú–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –æ—Ç–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥.')
            while True:
                time.sleep(60)
    except KeyboardInterrupt:
        print("\n[–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ Ctrl+C]")
    except Exception as e:
        print(f'[LocalChat Error]: {e}')
        error_log.append({'error': f'[LocalChat Error]: {e}', 'timestamp': time.strftime('%H:%M:%S')})
    finally:
        print('[MAIN] –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Telegram')
        if p:
            p.terminate()
            p.join()
        print('[MAIN] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OCR –º–æ–¥—É–ª—å')
        stop_ocr_monitoring()
        print('[MAIN] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        stop_auto_activity()

# --- –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è persistent –ø–∞–º—è—Ç–∏ ---
def save_all_users_persistent_memory():
    users_dir = os.path.join(os.path.dirname(__file__), 'memory', 'users')
    for filename in os.listdir(users_dir):
        if filename.endswith('.json'):
            user_id = filename.replace('.json', '')
            filepath = os.path.join(users_dir, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    messages = json.load(f)
                save_persistent_memory(user_id, messages)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è persistent –ø–∞–º—è—Ç–∏ –¥–ª—è {user_id}]: {e}")

if __name__ == "__main__":
    main()
