#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã VRM + –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
"""

import subprocess
import sys
import os
import time
import threading
import signal
import webbrowser
from pathlib import Path

class IntegratedSystem:
    def __init__(self):
        self.processes = []
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.assistant_dir = Path("assistant")
        self.vrm_dir = Path("VRMoverlay")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.check_requirements()
        
    def check_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if not self.assistant_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ 'assistant' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            sys.exit(1)
            
        if not (self.assistant_dir / "main.py").exists():
            print("‚ùå –§–∞–π–ª 'assistant/main.py' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É VRM
        if not self.vrm_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ 'VRMoverlay' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            sys.exit(1)
            
        if not (self.vrm_dir / "package.json").exists():
            print("‚ùå –§–∞–π–ª 'VRMoverlay/package.json' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
            
        print("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
    def start_assistant(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        try:
            process = subprocess.Popen(
                [sys.executable, "main.py"],
                cwd=self.assistant_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            self.processes.append(("assistant", process))
            print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
            return process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            return None
            
    def start_vrm(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç VRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print("üé≠ –ó–∞–ø—É—Å–∫ VRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not (self.vrm_dir / "node_modules").exists():
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π VRM...")
                subprocess.run(["npm", "install"], cwd=self.vrm_dir, check=True)
                
            process = subprocess.Popen(
                ["npm", "run", "dev"],
                cwd=self.vrm_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            self.processes.append(("vrm", process))
            print("‚úÖ VRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VRM: {e}")
            return None
            
    def open_browser(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å VRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        time.sleep(3)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        try:
            webbrowser.open("http://localhost:3000")
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏"""
        while self.running:
            for name, process in self.processes:
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                    if self.running:
                        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {name}...")
                        if name == "assistant":
                            self.start_assistant()
                        elif name == "vrm":
                            self.start_vrm()
            time.sleep(1)
            
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all()
        
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for name, process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
                
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã VRM + –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        print("=" * 50)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        assistant_process = self.start_assistant()
        if not assistant_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            return
            
        vrm_process = self.start_vrm()
        if not vrm_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å VRM")
            self.stop_all()
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=self.monitor_processes, daemon=True)
        monitor_thread.start()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser_thread = threading.Thread(target=self.open_browser, daemon=True)
        browser_thread.start()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üì± VRM –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: http://localhost:31994")
        print("üñºÔ∏è Overlay: http://localhost:31991")
        print("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
            
        self.stop_all()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = IntegratedSystem()
    system.run()

if __name__ == "__main__":
    main() 