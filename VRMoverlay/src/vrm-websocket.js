// === –°–¢–ï–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
// let textOverlayQueue = [];

// function showTextOverlay(text, duration) {
//     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
//     if (text && text.trim()) {
//         textOverlayQueue.push({ text, timestamp: Date.now() });
//     }
//     // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
//     if (textOverlayQueue.length > 2) {
//         textOverlayQueue.shift();
//     }
//
//     // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//     let overlay = document.getElementById('text-overlay-multi');
//     if (!overlay) {
//         overlay = document.createElement('div');
//         overlay.id = 'text-overlay-multi';
//         overlay.style.cssText = `
//             position: fixed;
//             bottom: 25vh;
//             left: 50%;
//             transform: translateX(-50%);
//             z-index: 1000;
//             display: flex;
//             flex-direction: column;
//             align-items: center;
//             pointer-events: none;
//         `;
//         document.body.appendChild(overlay);
//     }
//
//     // –û—á–∏—â–∞–µ–º overlay
//     overlay.innerHTML = '';
//     textOverlayQueue.forEach((msg, idx) => {
//         const div = document.createElement('div');
//         div.textContent = msg.text;
//         div.style.cssText = `
//             background: linear-gradient(135deg, rgba(0, 0, 0, 0.9) 0%, rgba(102, 126, 234, 0.9) 100%);
//             color: white;
//             padding: 1.2rem 2rem;
//             border-radius: 12px;
//             font-size: 1.5em;
//             font-weight: 600;
//             margin-bottom: 10px;
//             opacity: 1;
//             transition: opacity 0.5s;
//             max-width: 80vw;
//             text-align: center;
//             box-shadow: 0 8px 32px rgba(0,0,0,0.6);
//         `;
//         overlay.appendChild(div);
//
//         // Fade out —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ duration
//         if (idx === 0 && textOverlayQueue.length === 2) {
//             setTimeout(() => {
//                 div.style.opacity = '0';
//                 setTimeout(() => {
//                     if (overlay.contains(div)) overlay.removeChild(div);
//                 }, 500);
//             }, duration);
//         }
//     });
//
//     // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ duration
//     if (textOverlayQueue.length === 2) {
//         setTimeout(() => {
//             if (textOverlayQueue.length > 0) {
//                 textOverlayQueue.shift();
//                 // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å overlay
//                 showTextOverlay('', 0);
//             }
//         }, duration);
//     }
// }

// WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è VRM —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
window.vrmTimingHistory = window.vrmTimingHistory || [];
function logVrmTiming(type, received, applied) {
    window.vrmTimingHistory.push({
        type,
        received,
        applied,
        delay: applied - received
    });
    if (window.vrmTimingHistory.length > 10) window.vrmTimingHistory.shift();
}

class VRMWebSocketClient {
    constructor(vrmApp) {
        this.vrmApp = vrmApp;
        this.ws = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 2000;
        this.isConnected = false;
        this.hasSentInitialMessage = false;
        this.lastPingTime = 0;
        this.pingInterval = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.wsHost = '192.168.1.4'; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à IP
        this.wsPort = 31992; // –ü–æ—Ä—Ç WebSocket –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        this.textWsPort = 31993; // –ü–æ—Ä—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ overlay
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
        this.textOverlayConfig = {
            defaultDuration: 12000, // 12 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            minDuration: 3000,      // –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
            maxDuration: 30000,     // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            fadeInTime: 300,        // –í—Ä–µ–º—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            fadeOutTime: 500        // –í—Ä–µ–º—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        };
        
        this.init();
    }
    
    init() {
        this.connect();
        this.setupEventListeners();
    }
    
    connect() {
        try {
            const wsUrl = `ws://${this.wsHost}:${this.wsPort}`;
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${wsUrl}`);
            console.log(`üîå –•–æ—Å—Ç: ${this.wsHost}, –ü–æ—Ä—Ç: ${this.wsPort}`);
            
            this.ws = new WebSocket(wsUrl);
            
            this.ws.onopen = () => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                this.updateStatus('connected');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä VRM –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if (!this.hasSentInitialMessage) {
                    this.sendMessage({
                        type: 'vrm_client',
                        client: 'vrm_overlay',
                        version: '1.0',
                        reconnect: false
                    });
                    this.hasSentInitialMessage = true;
                } else {
                                    // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ
                this.sendMessage({
                    type: 'vrm_client',
                    client: 'vrm_overlay',
                    version: '1.0',
                    reconnect: true
                });
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                this.startPingInterval();
            }
            };
            
            this.ws.onmessage = (event) => {
                this.handleMessage(event.data);
            };
            
            this.ws.onclose = (event) => {
                console.log(`‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥: ${event.code}, –ü—Ä–∏—á–∏–Ω–∞: ${event.reason}`);
                this.isConnected = false;
                this.stopPingInterval();
                this.updateStatus('disconnected');
                
                // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ (–∫–æ–¥ 1000)
                if (event.code !== 1000) {
                this.scheduleReconnect();
                } else {
                    console.log('‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
                }
            };
            
            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.updateStatus('error');
                
                // –í —Ä–µ–∂–∏–º–µ OBS –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (!window.IS_OBS_MODE) {
                    console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω.');
                }
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            this.scheduleReconnect();
        }
    }
    
    handleMessage(data) {
        try {
            const message = JSON.parse(data);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', message);
            const received = performance.now();
            switch (message.type) {
                case 'emotion':
                    this.handleEmotion(message, received);
                    break;
                case 'animation':
                    this.handleAnimation(message, received);
                    break;
//                case 'text':
//                    this.handleText(message);
//                    break;
                case 'status':
                    this.handleStatus(message, received);
                    break;
                case 'speech':
                    this.handleSpeech(message, received);
                    break;
                case 'lipsync':
                    this.handleLipsyncMessage(message, received);
                    break;
                case 'camera_control':
                    this.handleCameraControl(message, received);
                    break;
                case 'pose_control':
                    this.handlePoseControl(message, received);
                    break;
                case 'light_control':
                    this.handleLightControl(message, received);
                    break;
                case 'pong':
                    // –û—Ç–≤–µ—Ç –Ω–∞ ping
                    const pingTime = Date.now() - this.lastPingTime;
                    console.log(`üèì –ü–æ–ª—É—á–µ–Ω pong, –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${pingTime}ms`);
                    break;
                case 'client_ack':
                    // –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                    console.log('‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VRM –∫–ª–∏–µ–Ω—Ç–∞');
                    break;
                default:
                    console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    
    handleEmotion(message, received) {
        const { emotion, intensity = 1.0, duration = 2000, priority = 5 } = message;
        console.log(`üòä –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏—é: ${emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${intensity}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority})`);
        const applied = performance.now();
        logVrmTiming('emotion', received, applied);
        
        if (this.vrmApp) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É blend shapes
                if (this.vrmApp.blendShapeManager) {
                    this.vrmApp.blendShapeManager.applyEmotion(emotion, intensity, priority);
                } else if (this.vrmApp.applyEmotion) {
                    // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                    this.vrmApp.applyEmotion(emotion);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏:', error);
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                if (this.vrmApp.applyEmotion) {
            this.vrmApp.applyEmotion(emotion);
                }
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if (duration > 0) {
            setTimeout(() => {
                if (this.vrmApp) {
                    try {
                        if (this.vrmApp.blendShapeManager) {
                            this.vrmApp.blendShapeManager.resetEmotions();
                        } else if (this.vrmApp.resetEmotions) {
                    this.vrmApp.resetEmotions();
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π:', error);
                    }
                }
            }, duration);
        }
    }
    
    handleAnimation(message, received) {
        const { animation, duration = 5000 } = message;
        console.log(`üé≠ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏—é: ${animation}`);
        const applied = performance.now();
        logVrmTiming('animation', received, applied);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (this.vrmApp && this.vrmApp.playMovement) {
            this.vrmApp.playMovement(animation);
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ idle —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if (duration > 0) {
            setTimeout(() => {
                if (this.vrmApp && this.vrmApp.playMovement) {
                    this.vrmApp.playMovement('idle');
                }
            }, duration);
        }
    }
    
//    handleText(message) {
//        const { text, duration } = message;
//        const finalDuration = this.validateDuration(duration || this.textOverlayConfig.defaultDuration);
//        console.log(`üí¨ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç: ${text} (${finalDuration}ms)`);
//        showTextOverlay(text, finalDuration);
//    }
    
    handleStatus(message, received) {
        const { status } = message;
        console.log(`üìä –°—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${status}`);
        const applied = performance.now();
        logVrmTiming('status', received, applied);
        
        if (this.vrmApp) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É state machine
            if (this.vrmApp.stateMachine) {
                try {
                    this.vrmApp.stateMachine.transitionTo(status);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ state machine:', error);
                    // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                    this.handleStatusFallback(status);
                }
            } else {
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                this.handleStatusFallback(status);
            }
        }
    }
    
    handleStatusFallback(status) {
        if (!this.vrmApp || !this.vrmApp.playMovement) return;
        
        switch (status) {
            case 'idle':
                    this.vrmApp.playMovement('idle');
                break;
            case 'talking':
                    this.vrmApp.playMovement('talking');
                break;
            case 'thinking':
                    this.vrmApp.playMovement('thinking_move');
                break;
            case 'waiting':
                    this.vrmApp.playMovement('idle');
                break;
            default:
                console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
        }
    }
    
    handleSpeech(message, received) {
        const { isSpeaking, text } = message;
        console.log(`üó£Ô∏è –†–µ—á—å: ${isSpeaking ? '–Ω–∞—á–∞–ª–∞—Å—å' : '–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å'} - ${text}`);
        const applied = performance.now();
        logVrmTiming('speech', received, applied);
        
        if (isSpeaking) {
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–µ—á–∏
            if (this.vrmApp && this.vrmApp.playMovement) {
                this.vrmApp.playMovement('talking');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—á–∏
            if (text) {
                const duration = this.textOverlayConfig.defaultDuration;
                this.showTextOverlay(text, duration);
            }
        } else {
            // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–µ—á–∏
            if (this.vrmApp && this.vrmApp.playMovement) {
                this.vrmApp.playMovement('idle');
            }
        }
    }
    
    handleLipsyncMessage(message, received) {
        if (!this.vrmApp) return;
        
        const applied = performance.now();
        logVrmTiming('lipsync', received, applied);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É blend shapes
            if (this.vrmApp.blendShapeManager) {
                const values = {
                    'Fcl_MTH_A': message.A || 0,
                    'Fcl_MTH_I': message.I || 0,
                    'Fcl_MTH_U': message.U || 0,
                    'Fcl_MTH_E': message.E || 0,
                    'Fcl_MTH_O': message.O || 0,
                    'energy': message.energy || 0
                };
                
        // –ï—Å–ª–∏ –µ—Å—Ç—å energy ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º energy lipsync
        if (typeof message.energy !== 'undefined') {
                    values['Fcl_MTH_A'] = 0;
                    values['Fcl_MTH_I'] = 0;
                    values['Fcl_MTH_U'] = 0;
                    values['Fcl_MTH_E'] = 0;
                    values['Fcl_MTH_O'] = 0;
                }
                
                this.vrmApp.blendShapeManager.applyLipsync(values, 10);
            } else if (this.vrmApp.setLipsync) {
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                if (typeof message.energy !== 'undefined') {
                    this.vrmApp.setLipsync({
                        'Fcl_MTH_A': 0,
                        'Fcl_MTH_I': 0,
                        'Fcl_MTH_U': 0,
                        'Fcl_MTH_E': 0,
                        'Fcl_MTH_O': 0,
                        'energy': message.energy
                    });
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–ø—Å–∏–Ω–∫–∞:', error);
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
            if (this.vrmApp.setLipsync && typeof message.energy !== 'undefined') {
            this.vrmApp.setLipsync({
                'Fcl_MTH_A': 0,
                'Fcl_MTH_I': 0,
                'Fcl_MTH_U': 0,
                'Fcl_MTH_E': 0,
                'Fcl_MTH_O': 0,
                'energy': message.energy
            });
        }
        }
    }
    
    updateStatus(status) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const statusIndicator = document.getElementById('ws-status');
        if (statusIndicator) {
            statusIndicator.textContent = `WebSocket: ${status}`;
            statusIndicator.className = `status-${status}`;
        }
    }
    
    scheduleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${this.reconnectDelay}ms`);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
            
            setTimeout(() => {
                console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}...`);
                this.connect();
            }, delay);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.updateStatus('failed');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            setTimeout(() => {
                this.reconnectAttempts = 0;
                console.log('üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        }
    }
    
    setupEventListeners() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        window.addEventListener('beforeunload', () => {
            if (this.ws) {
                this.ws.close();
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        window.addEventListener('focus', () => {
            if (this.isConnected && this.ws && this.ws.readyState === WebSocket.OPEN) {
                console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É');
                this.testConnection();
            }
        });
    }
    
    startPingInterval() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.pingInterval = setInterval(() => {
            if (this.isConnected && this.ws && this.ws.readyState === WebSocket.OPEN) {
                this.testConnection();
            } else {
                console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                this.isConnected = false;
                this.scheduleReconnect();
            }
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    }
    
    stopPingInterval() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
    }
    
    sendMessage(message) {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify(message));
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    requestEmotion(emotion, intensity = 1.0) {
        this.sendMessage({
            type: 'request_emotion',
            emotion: emotion,
            intensity: intensity
        });
    }
    
    requestAnimation(animation, duration = 5000) {
        this.sendMessage({
            type: 'request_animation',
            animation: animation,
            duration: duration
        });
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    testConnection() {
        if (!this.isConnected || !this.ws || this.ws.readyState !== WebSocket.OPEN) {
            console.log('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ping');
            return false;
        }
        
        this.lastPingTime = Date.now();
        this.sendMessage({
            type: 'ping',
            timestamp: this.lastPingTime
        });
        
        console.log('üèì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        return true;
    }
    
    validateDuration(duration) {
        const { minDuration, maxDuration } = this.textOverlayConfig;
        return Math.max(minDuration, Math.min(maxDuration, duration));
    }

    // === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    
    handleCameraControl(message, received) {
        const { action, value } = message;
        console.log(`üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π: ${action} = ${value}`);
        const applied = performance.now();
        logVrmTiming('camera_control', received, applied);
        
        if (!this.vrmApp) return;
        
        switch (action) {
            case 'distance':
                if (this.vrmApp.camera) {
                    this.vrmApp.camera.position.z = parseFloat(value);
                }
                break;
            case 'rotation':
                if (this.vrmApp.rotationGroup) {
                    this.vrmApp.rotationGroup.rotation.y = THREE.MathUtils.degToRad(parseFloat(value));
                }
                break;
            case 'position':
                if (this.vrmApp.camera && value.x !== undefined && value.y !== undefined && value.z !== undefined) {
                    this.vrmApp.camera.position.set(value.x, value.y, value.z);
                }
                break;
        }
    }
    
    handlePoseControl(message, received) {
        const { bone, axis, value } = message;
        console.log(`üßç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–æ–π: ${bone}.${axis} = ${value}`);
        const applied = performance.now();
        logVrmTiming('pose_control', received, applied);
        
        if (!this.vrmApp) return;
        
        const boneObj = this.vrmApp.findBoneByName(bone);
        if (boneObj) {
            switch (axis) {
                case 'x':
                    boneObj.rotation.x = parseFloat(value);
                    break;
                case 'y':
                    boneObj.rotation.y = parseFloat(value);
                    break;
                case 'z':
                    boneObj.rotation.z = parseFloat(value);
                    break;
            }
        }
    }
    
    handleLightControl(message, received) {
        const { action, value } = message;
        console.log(`üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º: ${action} = ${value}`);
        const applied = performance.now();
        logVrmTiming('light_control', received, applied);
        
        if (!this.vrmApp || !this.vrmApp.lights) return;
        
        const intensity = parseFloat(value);
        
        switch (action) {
            case 'ambient':
                if (this.vrmApp.lights.ambient) {
                    this.vrmApp.lights.ambient.intensity = intensity * 0.6;
                }
                break;
            case 'directional':
                if (this.vrmApp.lights.directional) {
                    this.vrmApp.lights.directional.intensity = intensity;
                }
                break;
            case 'point':
                if (this.vrmApp.lights.point) {
                    this.vrmApp.lights.point.intensity = intensity * 0.5;
                }
                break;
            case 'all':
                if (this.vrmApp.lights.ambient) this.vrmApp.lights.ambient.intensity = intensity * 0.6;
                if (this.vrmApp.lights.directional) this.vrmApp.lights.directional.intensity = intensity;
                if (this.vrmApp.lights.point) this.vrmApp.lights.point.intensity = intensity * 0.5;
                break;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.js
window.VRMWebSocketClient = VRMWebSocketClient; 