/**
 * –ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è VRM Overlay
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–∞–±—ã—Ö –ü–ö
 */

class PerformanceOptimizer {
    constructor() {
        this.settings = {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            renderScale: 1.0,
            maxFPS: 60,
            enableVSync: true,
            enableAntialiasing: true,
            shadowQuality: 'medium',
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π
            animationUpdateRate: 60,
            enableComplexAnimations: true,
            enableMicroMovements: true,
            enableBreathing: true,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
            enableShadows: true,
            shadowMapSize: 1024,
            lightQuality: 'medium',
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            modelLOD: 'high',
            enableBlendShapes: true,
            enableLipsync: true,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
            websocketUpdateRate: 30,
            enableDetailedLogging: false
        };
        
        this.performanceMode = 'auto'; // 'auto', 'low', 'medium', 'high'
        this.fpsHistory = [];
        this.lastFpsCheck = 0;
        this.adaptiveMode = true;
        
        this.init();
    }
    
    init() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        this.detectHardware();
        this.loadSettings();
        this.setupAdaptiveOptimization();
    }
    
    detectHardware() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        
        if (gl) {
            const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
            if (debugInfo) {
                const renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
                console.log('üéÆ GPU:', renderer);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å GPU
                if (renderer.includes('Intel') || renderer.includes('HD Graphics')) {
                    this.performanceMode = 'low';
                    console.log('üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, —Ä–µ–∂–∏–º: LOW');
                } else if (renderer.includes('GTX') || renderer.includes('RTX')) {
                    this.performanceMode = 'high';
                    console.log('üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞, —Ä–µ–∂–∏–º: HIGH');
                } else {
                    this.performanceMode = 'medium';
                    console.log('üìä –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: MEDIUM');
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU
        if (navigator.hardwareConcurrency) {
            const cores = navigator.hardwareConcurrency;
            console.log('üñ•Ô∏è CPU —è–¥–µ—Ä:', cores);
            
            if (cores <= 2) {
                this.performanceMode = 'low';
                console.log('üìâ –ú–∞–ª–æ–º–æ—â–Ω—ã–π CPU, —Ä–µ–∂–∏–º: LOW');
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        if (navigator.deviceMemory) {
            const memory = navigator.deviceMemory;
            console.log('üíæ RAM:', memory, 'GB');
            
            if (memory <= 4) {
                this.performanceMode = 'low';
                console.log('üìâ –ú–∞–ª—ã–π –æ–±—ä–µ–º RAM, —Ä–µ–∂–∏–º: LOW');
            }
        }
    }
    
    loadSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const saved = localStorage.getItem('vrm_performance_settings');
        if (saved) {
            try {
                const loaded = JSON.parse(saved);
                this.settings = { ...this.settings, ...loaded };
                console.log('üíæ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        this.applyPerformanceMode();
    }
    
    applyPerformanceMode() {
        const modes = {
            low: {
                renderScale: 0.75,
                maxFPS: 30,
                enableVSync: true,
                enableAntialiasing: false,
                shadowQuality: 'low',
                animationUpdateRate: 30,
                enableComplexAnimations: false,
                enableMicroMovements: false,
                enableBreathing: false,
                enableShadows: false,
                shadowMapSize: 512,
                lightQuality: 'low',
                modelLOD: 'low',
                enableBlendShapes: true,
                enableLipsync: true,
                websocketUpdateRate: 15,
                enableDetailedLogging: false
            },
            medium: {
                renderScale: 0.9,
                maxFPS: 45,
                enableVSync: true,
                enableAntialiasing: true,
                shadowQuality: 'medium',
                animationUpdateRate: 45,
                enableComplexAnimations: true,
                enableMicroMovements: true,
                enableBreathing: true,
                enableShadows: true,
                shadowMapSize: 1024,
                lightQuality: 'medium',
                modelLOD: 'medium',
                enableBlendShapes: true,
                enableLipsync: true,
                websocketUpdateRate: 30,
                enableDetailedLogging: false
            },
            high: {
                renderScale: 1.0,
                maxFPS: 60,
                enableVSync: true,
                enableAntialiasing: true,
                shadowQuality: 'high',
                animationUpdateRate: 60,
                enableComplexAnimations: true,
                enableMicroMovements: true,
                enableBreathing: true,
                enableShadows: true,
                shadowMapSize: 2048,
                lightQuality: 'high',
                modelLOD: 'high',
                enableBlendShapes: true,
                enableLipsync: true,
                websocketUpdateRate: 60,
                enableDetailedLogging: true
            }
        };
        
        if (modes[this.performanceMode]) {
            this.settings = { ...this.settings, ...modes[this.performanceMode] };
            console.log(`‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${this.performanceMode.toUpperCase()}`);
        }
    }
    
    setupAdaptiveOptimization() {
        if (!this.adaptiveMode) return;
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.checkPerformance();
        }, 5000);
        
        console.log('üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞');
    }
    
    checkPerformance() {
        const now = performance.now();
        if (now - this.lastFpsCheck < 1000) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π FPS
        const currentFPS = this.getCurrentFPS();
        if (currentFPS === null) return;
        
        this.fpsHistory.push(currentFPS);
        if (this.fpsHistory.length > 10) {
            this.fpsHistory.shift();
        }
        
        const avgFPS = this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length;
        const targetFPS = this.settings.maxFPS;
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if (avgFPS < targetFPS * 0.8) {
            this.degradePerformance();
        } else if (avgFPS > targetFPS * 0.95) {
            this.improvePerformance();
        }
        
        this.lastFpsCheck = now;
    }
    
    getCurrentFPS() {
        // –ü–æ–ª—É—á–∞–µ–º FPS –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.app && window.app.currentFPS) {
            return window.app.currentFPS;
        }
        return null;
    }
    
    degradePerformance() {
        console.log('üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        
        // –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        if (this.settings.renderScale > 0.5) {
            this.settings.renderScale = Math.max(0.5, this.settings.renderScale - 0.1);
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (this.settings.enableAntialiasing) {
            this.settings.enableAntialiasing = false;
        }
        
        if (this.settings.enableShadows) {
            this.settings.enableShadows = false;
        }
        
        // –°–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (this.settings.animationUpdateRate > 20) {
            this.settings.animationUpdateRate = Math.max(20, this.settings.animationUpdateRate - 10);
        }
        
        this.applySettings();
    }
    
    improvePerformance() {
        console.log('üìà –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        
        // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        if (this.settings.renderScale < 1.0) {
            this.settings.renderScale = Math.min(1.0, this.settings.renderScale + 0.05);
        }
        
        // –í–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
        if (!this.settings.enableAntialiasing && this.performanceMode !== 'low') {
            this.settings.enableAntialiasing = true;
        }
        
        if (!this.settings.enableShadows && this.performanceMode !== 'low') {
            this.settings.enableShadows = true;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (this.settings.animationUpdateRate < this.settings.maxFPS) {
            this.settings.animationUpdateRate = Math.min(this.settings.maxFPS, this.settings.animationUpdateRate + 5);
        }
        
        this.applySettings();
    }
    
    applySettings() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—É
        if (window.app && window.app.renderer) {
            const renderer = window.app.renderer;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            
            if (!this.settings.enableAntialiasing) {
                renderer.antialias = false;
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–µ–π
            if (this.settings.enableShadows) {
                renderer.shadowMap.enabled = true;
                renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            } else {
                renderer.shadowMap.enabled = false;
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.saveSettings();
    }
    
    saveSettings() {
        try {
            localStorage.setItem('vrm_performance_settings', JSON.stringify(this.settings));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setPerformanceMode(mode) {
        if (['low', 'medium', 'high', 'auto'].includes(mode)) {
            this.performanceMode = mode;
            this.applyPerformanceMode();
            this.applySettings();
            console.log(`üéØ –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode.toUpperCase()}`);
        }
    }
    
    getSettings() {
        return { ...this.settings };
    }
    
    updateSetting(key, value) {
        if (key in this.settings) {
            this.settings[key] = value;
            this.applySettings();
            console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${key} = ${value}`);
        }
    }
    
    getPerformanceInfo() {
        return {
            mode: this.performanceMode,
            settings: this.settings,
            fpsHistory: [...this.fpsHistory],
            avgFPS: this.fpsHistory.length > 0 ? 
                this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length : 0
        };
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    optimizeRenderer(renderer) {
        if (!renderer) return;
        
        console.log('üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        renderer.antialias = this.settings.enableAntialiasing;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–Ω–µ–π
        if (this.settings.enableShadows) {
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        } else {
            renderer.shadowMap.enabled = false;
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∞
        const width = window.innerWidth * this.settings.renderScale;
        const height = window.innerHeight * this.settings.renderScale;
        renderer.setSize(width, height);
        
        console.log('‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    optimizeLights(lights) {
        if (!lights) return;
        
        console.log('üí° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–Ω–µ–π
        if (lights.directional) {
            lights.directional.castShadow = this.settings.enableShadows;
            if (this.settings.enableShadows) {
                lights.directional.shadow.mapSize.width = this.settings.shadowMapSize;
                lights.directional.shadow.mapSize.height = this.settings.shadowMapSize;
            }
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        const intensityMultiplier = {
            low: 0.8,
            medium: 1.0,
            high: 1.2
        }[this.settings.lightQuality] || 1.0;
        
        if (lights.ambient) lights.ambient.intensity *= intensityMultiplier;
        if (lights.directional) lights.directional.intensity *= intensityMultiplier;
        if (lights.point) lights.point.intensity *= intensityMultiplier;
        
        console.log('‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    optimizeAnimations(mixer) {
        if (!mixer) return;
        
        console.log('üé≠ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        mixer.timeScale = this.settings.animationUpdateRate / 60;
        
        console.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PerformanceOptimizer = PerformanceOptimizer; 