// Three.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CDN –≤ HTML
// VRMWebSocketClient —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.VRMWebSocketClient
// AnimationIntegration —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.AnimationIntegration

class VRMStreamingApp {
    constructor() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VRMStreamingApp...');
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.vrm = null;
        this.clock = new THREE.Clock();
        this.controls = {};
        this.isLoaded = false;
        this.animations = [];
        this.currentAnimation = null;
        this.mixer = null;
        this.blendShapes = [];
        this.currentBlendShapes = {};
        this.movementAnimations = {};
        this.currentMovement = null;
        this.movementMixer = null;
        this.originalColors = [];
        this.naturalPose = null;
        this.blinkInterval = null;
        this.isBlinking = false;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è FPS
        this.frameCount = 0;
        this.lastFpsUpdate = 0;
        this.currentFPS = 0;
        this.lastFrameTime = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
        this.lipsyncBlendShapes = {
            'Fcl_MTH_A': 0,
            'Fcl_MTH_I': 0,
            'Fcl_MTH_U': 0,
            'Fcl_MTH_E': 0,
            'Fcl_MTH_O': 0,
            'energy': 0 // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–º–ø–ª–∏—Ç—É–¥—ã
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ç–æ—Ä –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        this.lipsyncLerp = {
            target: { ...this.lipsyncBlendShapes },
            current: { ...this.lipsyncBlendShapes },
            speed: 0.3 // –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∏–º–∞—Ü–∏–π
        try {
            this.animationIntegration = new window.AnimationIntegration(this);
            console.log('‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π:', error);
            this.animationIntegration = null;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try {
            this.performanceOptimizer = new PerformanceOptimizer();
            console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞:', error);
            this.performanceOptimizer = null;
        }
        
        console.log('‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º init()...');
        this.init();
    }

    init() {
        console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        try {
            this.setupScene();
            console.log('‚úÖ –°—Ü–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            
            this.setupCamera();
            console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            
            this.setupRenderer();
            console.log('‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            
            this.setupLights();
            console.log('‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
            
            this.setupControls();
            console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            
            this.loadVRMModel();
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞');
            
            this.animate();
            console.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
            
            this.updateInfo();
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FPS
            this.lastFpsUpdate = Date.now();
            this.frameCount = 0;
            this.currentFPS = 0;
            
            // === –ù–æ–≤—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç ===
            try {
                this.wsClient = new window.VRMWebSocketClient(this);
                console.log('‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                this.restoreLastState();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –∫–ª–∏–µ–Ω—Ç–∞:', error);
                this.wsClient = null;
            }
            
            console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    setupScene() {
        this.scene = new THREE.Scene();
        this.scene.background = null; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è OBS
    }

    setupCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45,
            window.innerWidth / window.innerHeight,
            0.1,
            1000
        );
        this.camera.position.set(0, 1.5, 3);
        this.camera.lookAt(0, 1, 0);
    }

    setupRenderer() {
        const canvas = document.getElementById('canvas');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        const settings = this.performanceOptimizer ? this.performanceOptimizer.getSettings() : {
            enableAntialiasing: true,
            enableShadows: true,
            renderScale: 1.0
        };
        
        this.renderer = new THREE.WebGLRenderer({ 
            canvas: canvas,
            antialias: settings.enableAntialiasing,
            alpha: true
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—É
        if (this.performanceOptimizer) {
            this.performanceOptimizer.optimizeRenderer(this.renderer);
        } else {
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            this.renderer.shadowMap.enabled = settings.enableShadows;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        }
        
        this.renderer.outputColorSpace = THREE.SRGBColorSpace;
    }

    setupLights() {
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        this.scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(5, 5, 5);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        const settings = this.performanceOptimizer ? this.performanceOptimizer.getSettings() : {
            enableShadows: true,
            shadowMapSize: 1024
        };
        
        directionalLight.castShadow = settings.enableShadows;
        if (settings.enableShadows) {
            directionalLight.shadow.mapSize.width = settings.shadowMapSize;
            directionalLight.shadow.mapSize.height = settings.shadowMapSize;
        }
        
        this.scene.add(directionalLight);

        const pointLight = new THREE.PointLight(0xffffff, 0.5);
        pointLight.position.set(-5, 5, 5);
        this.scene.add(pointLight);

        this.lights = {
            ambient: ambientLight,
            directional: directionalLight,
            point: pointLight
        };
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é
        if (this.performanceOptimizer) {
            this.performanceOptimizer.optimizeLights(this.lights);
        }
    }

    setupControls() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OBS
        if (window.IS_OBS_MODE) {
            console.log('üé≠ OBS —Ä–µ–∂–∏–º: —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä .controls –∏–∑ index.html
        const controlsContainer = document.querySelector('.controls');
        if (!controlsContainer) {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .controls –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–ø—Å–∏–Ω–∫–∞
        const lipsyncTestButton = document.createElement('button');
        lipsyncTestButton.textContent = 'üëÑ –¢–µ—Å—Ç –ª–∏–ø—Å–∏–Ω–∫–∞';
        lipsyncTestButton.onclick = () => this.testLipsync();
        controlsContainer.appendChild(lipsyncTestButton);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π
        const newSystemGroup = document.createElement('div');
        newSystemGroup.className = 'control-group';
        newSystemGroup.innerHTML = `
            <h3 style="margin: 10px 0 5px 0; color: #223; font-size:15px;">üé≠ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px; margin-bottom: 10px;">
                <button class="btn" onclick="window.app.testOverlappingAnimations()">–ù–∞–ª–æ–∂–µ–Ω–∏–µ</button>
                <button class="btn" onclick="window.app.testEmotionPriorities()">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</button>
                <button class="btn" onclick="window.app.testStateMachine()">State Machine</button>
                <button class="btn" onclick="window.app.showDebugInfo()">–û—Ç–ª–∞–¥–∫–∞</button>
            </div>
        `;
        controlsContainer.appendChild(newSystemGroup);

        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        
        this.controls.cameraDistance = document.getElementById('cameraDistance');
        this.controls.rotationSpeed = document.getElementById('rotationSpeed');
        this.controls.lightIntensity = document.getElementById('lightIntensity');
        this.controls.fullscreenBtn = document.getElementById('fullscreenBtn');
        this.controls.screenshotBtn = document.getElementById('screenshotBtn');
        this.controls.performanceBtn = document.getElementById('performanceBtn');
        this.controls.websocketTestBtn = document.getElementById('websocketTestBtn');
        this.controls.resetLightBtn = document.getElementById('resetLightBtn');
        this.controls.faceCameraBtn = document.getElementById('faceCameraBtn');

        if (this.controls.cameraDistance) {
            this.controls.cameraDistance.addEventListener('input', (e) => {
                const distance = parseFloat(e.target.value);
                this.camera.position.z = distance;
                
                // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ OBS"
            });
        }

        if (this.controls.rotationSpeed) {
            this.controls.rotationSpeed.addEventListener('input', (e) => {
                const rotationAngle = parseFloat(e.target.value);
                const rotationRadians = THREE.MathUtils.degToRad(rotationAngle);
                
                if (this.rotationGroup) {
                    this.rotationGroup.rotation.y = rotationRadians;
                }
                
                // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ OBS"
                
                console.log(`–ü–æ–≤–æ—Ä–æ—Ç –º–æ–¥–µ–ª–∏: ${rotationAngle}¬∞ (${rotationRadians.toFixed(3)} —Ä–∞–¥)`);
            });
        }

        if (this.controls.lightIntensity) {
            this.controls.lightIntensity.addEventListener('input', (e) => {
                const intensity = parseFloat(e.target.value);
                
                if (this.lights && this.lights.ambient && this.lights.directional && this.lights.point) {
                    this.lights.ambient.intensity = intensity * 0.6;
                    this.lights.directional.intensity = intensity;
                    this.lights.point.intensity = intensity * 0.5;
                    
                    // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ OBS"
                    
                    console.log('–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', intensity);
                }
            });
        }

        if (this.controls.resetLightBtn) {
            this.controls.resetLightBtn.addEventListener('click', () => {
                this.resetLight();
            });
        }

        if (this.controls.fullscreenBtn) {
            this.controls.fullscreenBtn.addEventListener('click', () => {
                this.toggleFullscreen();
            });
        }

        if (this.controls.screenshotBtn) {
            this.controls.screenshotBtn.addEventListener('click', () => {
                this.takeScreenshot();
            });
        }

        if (this.controls.performanceBtn) {
            this.controls.performanceBtn.addEventListener('click', () => {
                this.openPerformancePanel();
            });
        }

        if (this.controls.websocketTestBtn) {
            this.controls.websocketTestBtn.addEventListener('click', () => {
                this.openWebSocketTest();
            });
        }

        if (this.controls.faceCameraBtn) {
            this.controls.faceCameraBtn.addEventListener('click', () => {
                this.faceCamera();
            });
        }
    }

    async loadVRMModel() {
        try {
            const statusBar = document.getElementById('statusBar');
            const loading = document.getElementById('loading');
            
            if (statusBar && !window.IS_OBS_MODE) {
                statusBar.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ VRM –º–æ–¥–µ–ª–∏...';
            }
            
            console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É VRM –º–æ–¥–µ–ª–∏...');
            let gltf;
            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ GLTFLoader
            if (typeof THREE.GLTFLoader === 'undefined') {
                console.error('‚ùå THREE.GLTFLoader –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ THREE:', Object.keys(THREE));
                throw new Error('GLTFLoader –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CDN —Å—Å—ã–ª–∫–∏.');
            }
            
            const basicLoader = new THREE.GLTFLoader();
            gltf = await basicLoader.loadAsync('/public/mSkai_art.vrm');
            console.log('GLTF –∑–∞–≥—Ä—É–∂–µ–Ω:', gltf);
            
            console.log('–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏...');
            this.vrm = { scene: gltf.scene, update: () => {} };
            console.log('–û–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω:', this.vrm);
            
            this.rotationGroup = new THREE.Group();
            this.rotationGroup.add(this.vrm.scene);
            this.scene.add(this.rotationGroup);
            
            this.vrm.scene.position.set(0, 0, 0);
            this.vrm.scene.scale.setScalar(1);
            
            this.rotationGroup.rotation.y = Math.PI;
            console.log('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç:', THREE.MathUtils.radToDeg(this.rotationGroup.rotation.y).toFixed(1) + '¬∞');
            
            this.vrm.scene.traverse((child) => {
                if (child.isMesh) {
                    child.castShadow = true;
                    child.receiveShadow = true;
                }
            });

            // === –í–´–í–û–î–ò–ú –í–°–ï BLEND SHAPES (morph targets) ===
            console.log('==== BLEND SHAPES (morph targets) –ü–û –ú–ï–®–ê–ú ====' );
            this.vrm.scene.traverse((child) => {
                if (child.isMesh && child.morphTargetDictionary) {
                    console.log(`Mesh: ${child.name}`);
                    console.log('BlendShapes:', Object.keys(child.morphTargetDictionary));
                }
            });
            // === –ö–û–ù–ï–¶ –í–´–í–û–î–ê ===

            this.scene.add(this.rotationGroup);
            
            if (gltf.animations && gltf.animations.length > 0) {
                console.log('–ù–∞–π–¥–µ–Ω—ã –∞–Ω–∏–º–∞—Ü–∏–∏:', gltf.animations.length);
                this.setupAnimations(gltf.animations);
            } else {
                console.log('–ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏');
            }

            this.setupBlendShapes();
            this.setupBlinking();
            this.setupMovementAnimations();

            if (loading && !window.IS_OBS_MODE) {
                loading.style.display = 'none';
            }
            
            const blendShapeInfo = this.blendShapes.length > 0 ? ` (${this.blendShapes.length} BlendShapes)` : '';
            const statusText = `VRM –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${this.animations.length > 0 ? ` (${this.animations.length} –∞–Ω–∏–º–∞—Ü–∏–π)` : ''}${blendShapeInfo}`;
            
            if (statusBar && !window.IS_OBS_MODE) {
                statusBar.textContent = statusText;
            }
            
            console.log(statusText);
            this.isLoaded = true;

            this.updateInfo();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VRM –º–æ–¥–µ–ª–∏:', error);
            console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            
            const statusBar = document.getElementById('statusBar');
            if (statusBar && !window.IS_OBS_MODE) {
                statusBar.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ' + error.message;
            }
        }
    }

    animate() {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        const settings = this.performanceOptimizer ? this.performanceOptimizer.getSettings() : {
            maxFPS: 60
        };
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS
        const targetFrameTime = 1000 / settings.maxFPS;
        const now = performance.now();
        
        if (now - this.lastFrameTime < targetFrameTime) {
        requestAnimationFrame(() => this.animate());
            return;
        }
        
        this.lastFrameTime = now;
        requestAnimationFrame(() => this.animate());
        
        const delta = this.clock.getDelta();
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∏–º–∞—Ü–∏–π
            if (this.animationIntegration) {
                this.animationIntegration.update(delta);
            }
            
        if (this.vrm && this.isLoaded) {
            this.vrm.update(delta);
            this.updateLipsync(delta);
        }
        if (this.mixer) {
            this.mixer.update(delta);
        }
        if (this.movementMixer && !this.pauseAnimation) {
            this.movementMixer.update(delta);
        }
        this.updateInfo();
        this.applyLimbControls();
        this.renderer.render(this.scene, this.camera);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ animate loop:', error);
        }
    }

    updateInfo() {
        // –í —Ä–µ–∂–∏–º–µ OBS –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        if (window.IS_OBS_MODE) {
            return;
        }

        const resolution = document.getElementById('resolution');
        const fps = document.getElementById('fps');
        const status = document.getElementById('status');
        
        if (resolution) {
            resolution.textContent = `${window.innerWidth}x${window.innerHeight}`;
        }
        
        if (fps) {
            this.frameCount++;
            const now = Date.now();
            if (now - this.lastFpsUpdate > 1000) {
                this.currentFPS = Math.round(this.frameCount / ((now - this.lastFpsUpdate) / 1000));
                fps.textContent = this.currentFPS;
                this.lastFpsUpdate = now;
                this.frameCount = 0;
            }
        }
        
        if (status) {
            status.textContent = this.isLoaded ? '–ì–æ—Ç–æ–≤–æ –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏' : '–ó–∞–≥—Ä—É–∑–∫–∞...';
        }
    }

    onWindowResize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen();
        } else {
            document.exitFullscreen();
        }
    }

    takeScreenshot() {
        this.renderer.render(this.scene, this.camera);
        const canvas = this.renderer.domElement;
        const link = document.createElement('a');
        link.download = 'vrm-screenshot.png';
        link.href = canvas.toDataURL();
        link.click();
    }

    openPerformancePanel() {
        window.open('performance-panel.html', '_blank', 'width=800,height=600');
    }

    openWebSocketTest() {
        window.open('websocket-debug.html', '_blank', 'width=900,height=700');
    }

    setupAnimations(animations) {
        this.animations = animations;
        this.mixer = new THREE.AnimationMixer(this.vrm.scene);
        this.createAnimationControls();
    }

    createAnimationControls() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OBS
        if (window.IS_OBS_MODE) {
            return;
        }

        const controlsContainer = document.querySelector('.controls');
        if (!controlsContainer) {
            return;
        }
        
        if (this.animations.length > 0) {
            const animationGroup = document.createElement('div');
            animationGroup.className = 'control-group';
            animationGroup.innerHTML = `
                <label for="animationSelect">–ê–Ω–∏–º–∞—Ü–∏–∏:</label>
                <select id="animationSelect">
                    <option value="">–ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏</option>
                    ${this.animations.map((anim, index) => 
                        `<option value="${index}">${anim.name || `–ê–Ω–∏–º–∞—Ü–∏—è ${index + 1}`}</option>`
                    ).join('')}
                </select>
            `;
            
            const existingGroups = controlsContainer.querySelectorAll('.control-group');
            const insertAfter = existingGroups[existingGroups.length - 1];
            controlsContainer.insertBefore(animationGroup, insertAfter.nextSibling);
            
            this.setupAnimationEventHandlers();
        }
    }

    setupAnimationEventHandlers() {
        const animationSelect = document.getElementById('animationSelect');
        if (animationSelect) {
            animationSelect.addEventListener('change', (e) => {
                const selectedIndex = parseInt(e.target.value);
                if (selectedIndex >= 0 && selectedIndex < this.animations.length) {
                    this.playAnimation(selectedIndex);
                } else {
                    this.stopAnimation();
                }
            });
        }
    }

    playAnimation(index) {
        if (this.currentAnimation) {
            this.mixer.stopAllAction();
        }
        
        const animation = this.animations[index];
        this.currentAnimation = this.mixer.clipAction(animation);
        this.currentAnimation.play();
        
        console.log(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è: ${animation.name || `–ê–Ω–∏–º–∞—Ü–∏—è ${index + 1}`}`);
    }

    stopAnimation() {
        if (this.currentAnimation) {
            this.mixer.stopAllAction();
            this.currentAnimation = null;
            console.log('–ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    setupBlendShapes() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BlendShapes...');
        
        this.blendShapes = [];
        this.vrm.scene.traverse((child) => {
            if (child.isMesh && child.morphTargetDictionary) {
                this.blendShapes.push(child);
                console.log(`–ù–∞–π–¥–µ–Ω –º–µ—à —Å BlendShapes: ${child.name}`);
            }
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${this.blendShapes.length} –º–µ—à–µ–π —Å BlendShapes`);
        this.createEmotionButtons();
    }

    findEyeBlendShapes() {
        console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ blend shapes –¥–ª—è –º–æ—Ä–≥–∞–Ω–∏—è...');
        
        const eyeKeywords = ['eye', 'blink', 'close', 'lid', 'eyelid', 'brow', 'eyebrow'];
        
        const foundEyeShapes = this.findBlendShapesByKeywords(eyeKeywords);
        
        if (foundEyeShapes.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ blend shapes –¥–ª—è –≥–ª–∞–∑:', foundEyeShapes);
            
            console.log('üìã –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö blend shapes –¥–ª—è –≥–ª–∞–∑:');
            foundEyeShapes.forEach((shape, index) => {
                console.log(`${index + 1}. ${shape.mesh} -> ${shape.blendShape}`);
            });
        } else {
            console.log('‚ùå Blend shapes –¥–ª—è –≥–ª–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    findBlendShapesByKeywords(keywords) {
        console.log('üîç –ü–æ–∏—Å–∫ blend shapes –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:', keywords);
        
        if (!this.blendShapes || this.blendShapes.length === 0) {
            console.log('‚ùå BlendShapes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏');
            return [];
        }
        
        const foundShapes = [];
        
        this.blendShapes.forEach(mesh => {
            if (mesh.morphTargetDictionary) {
                const blendShapeNames = Object.keys(mesh.morphTargetDictionary);
                
                blendShapeNames.forEach(blendShapeName => {
                    const lowerName = blendShapeName.toLowerCase();
                    const isMatch = keywords.some(keyword => 
                        lowerName.includes(keyword.toLowerCase())
                    );
                    
                    if (isMatch) {
                        foundShapes.push({
                            mesh: mesh.name,
                            blendShape: blendShapeName,
                            index: mesh.morphTargetDictionary[blendShapeName]
                        });
                    }
                });
            }
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${foundShapes.length} blend shapes –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:`, foundShapes);
        return foundShapes;
    }

    setupBlinking() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ—Ä–≥–∞–Ω–∏—è...');
        
        let leftEyeClose = null;
        let rightEyeClose = null;
        
        const eyeBlendShapes = [
            'Fcl_ALL_Sorrow',
            'Fcl_ALL_Angry',
            'Fcl_EYE_Close_L', 'Fcl_EYE_Close_R',
            'Fcl_EYE_Close',
            'Eye_Close_L', 'Eye_Close_R',
            'Eye_Close',
            'Blink_L', 'Blink_R',
            'Blink',
            'EyeBlink_L', 'EyeBlink_R',
            'EyeBlink',
            'Eyes_Close_L', 'Eyes_Close_R',
            'Eyes_Close'
        ];
        
        this.blendShapes.forEach(mesh => {
            eyeBlendShapes.forEach(blendShapeName => {
                if (mesh.morphTargetDictionary[blendShapeName]) {
                    if (blendShapeName === 'Fcl_ALL_Sorrow') {
                        leftEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                        rightEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π blend shape –¥–ª—è –º–æ—Ä–≥–∞–Ω–∏—è: ${blendShapeName}`);
                    } else if (blendShapeName.includes('_L') || blendShapeName.includes('Left')) {
                        leftEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                    } else if (blendShapeName.includes('_R') || blendShapeName.includes('Right')) {
                        rightEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                    } else if (!leftEyeClose && !rightEyeClose) {
                        leftEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                        rightEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                    }
                }
            });
        });
        
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ blend shapes –¥–ª—è –≥–ª–∞–∑:', {
            leftEyeClose: leftEyeClose ? `${leftEyeClose.mesh.name}[${leftEyeClose.index}]` : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
            rightEyeClose: rightEyeClose ? `${rightEyeClose.mesh.name}[${rightEyeClose.index}]` : '–Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        
        if (!leftEyeClose || !rightEyeClose) {
            console.log('–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö blend shapes –¥–ª—è –≥–ª–∞–∑...');
            const eyeKeywords = ['eye', 'blink', 'close', 'lid', 'eyelid'];
            
            this.blendShapes.forEach(mesh => {
                const blendShapeNames = Object.keys(mesh.morphTargetDictionary);
                blendShapeNames.forEach(blendShapeName => {
                    const lowerName = blendShapeName.toLowerCase();
                    const isEyeRelated = eyeKeywords.some(keyword => lowerName.includes(keyword));
                    
                    if (isEyeRelated) {
                        if (!leftEyeClose) {
                            leftEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                            console.log(`–ù–∞–π–¥–µ–Ω –ª–µ–≤—ã–π –≥–ª–∞–∑: ${mesh.name} -> ${blendShapeName}`);
                        } else if (!rightEyeClose) {
                            rightEyeClose = { mesh, index: mesh.morphTargetDictionary[blendShapeName] };
                            console.log(`–ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤—ã–π –≥–ª–∞–∑: ${mesh.name} -> ${blendShapeName}`);
                        }
                    }
                });
            });
        }
        
        this.eyeBlendShapes = { leftEyeClose, rightEyeClose };
        
        if (leftEyeClose && rightEyeClose) {
            console.log('‚úÖ Blend shapes –¥–ª—è –º–æ—Ä–≥–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            
            const performBlink = () => {
                if (this.isBlinking) return;
                
                console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ä–≥–∞–Ω–∏–µ');
                
                const closeEyes = () => {
                    this.blendShapes.forEach(mesh => {
                        const index = mesh.morphTargetDictionary['Fcl_EYE_Close'];
                        if (index !== undefined) {
                            mesh.morphTargetInfluences[index] = 0.7;
                        }
                    });
                    this.isBlinking = true;
                };
                
                const openEyes = () => {
                    this.blendShapes.forEach(mesh => {
                        const index = mesh.morphTargetDictionary['Fcl_EYE_Close'];
                        if (index !== undefined) {
                            mesh.morphTargetInfluences[index] = 0;
                        }
                    });
                    this.isBlinking = false;
                };
                
                closeEyes();
                setTimeout(openEyes, 150);
            };
            
            this.blinkInterval = setInterval(performBlink, Math.random() * 4000 + 3000);
        } else {
            console.log('‚ùå Blend shapes –¥–ª—è –º–æ—Ä–≥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    manualBlink() {
        console.log('–†—É—á–Ω–æ–µ –º–æ—Ä–≥–∞–Ω–∏–µ');
        
        if (!this.vrm || !this.blendShapes || this.blendShapes.length === 0) {
            console.log('VRM –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ BlendShapes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const closeEyes = () => {
            this.blendShapes.forEach(mesh => {
                const index = mesh.morphTargetDictionary['Fcl_EYE_Close'];
                if (index !== undefined) {
                    mesh.morphTargetInfluences[index] = 0.7;
                }
            });
        };
        
        const openEyes = () => {
            this.blendShapes.forEach(mesh => {
                const index = mesh.morphTargetDictionary['Fcl_EYE_Close'];
                if (index !== undefined) {
                    mesh.morphTargetInfluences[index] = 0;
                }
            });
        };
        
        closeEyes();
        setTimeout(openEyes, 150);
    }

    createEmotionButtons() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OBS
        if (window.IS_OBS_MODE) {
            return;
        }

        const controlsContainer = document.querySelector('.controls');
        if (!controlsContainer) {
            return;
        }
        
        const emotionGroup = document.createElement('div');
        emotionGroup.className = 'control-group';
        emotionGroup.innerHTML = `
            <h3 style="margin: 10px 0 5px 0; color: #fff;">üòä –≠–º–æ—Ü–∏–∏</h3>
            <button class="btn" data-action="setEmotion" data-emotion="happy">üòä –†–∞–¥–æ—Å—Ç—å</button>
            <button class="btn" data-action="setEmotion" data-emotion="sad">üò¢ –ì—Ä—É—Å—Ç—å</button>
            <button class="btn" data-action="setEmotion" data-emotion="angry">üò† –ó–ª–æ—Å—Ç—å</button>
            <button class="btn" data-action="setEmotion" data-emotion="surprised">üò≤ –£–¥–∏–≤–ª–µ–Ω–∏–µ</button>
            <button class="btn" data-action="setEmotion" data-emotion="wink">üòâ –ü–æ–¥–º–∏–≥–∏–≤–∞–Ω–∏–µ</button>
            <button class="btn" data-action="setEmotion" data-emotion="blink">üò¥ –ú–æ—Ä–≥–∞–Ω–∏–µ</button>
            <button class="btn" data-action="manualBlink">üëÅÔ∏è –ú–æ—Ä–≥–Ω—É—Ç—å —Å–µ–π—á–∞—Å</button>
            <button class="btn" data-action="resetEmotions">üîÑ –°–±—Ä–æ—Å–∏—Ç—å —ç–º–æ—Ü–∏–∏</button>
        `;
        
        const existingGroups = controlsContainer.querySelectorAll('.control-group');
        const insertAfter = existingGroups[existingGroups.length - 1];
        controlsContainer.insertBefore(emotionGroup, insertAfter.nextSibling);
    }

    applyEmotion(emotionName) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É blend shapes
        if (this.animationIntegration) {
            const result = this.animationIntegration.applyEmotion(emotionName);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.currentEmotion = emotionName;
            this.saveState();
            return result;
        } else {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏—é:', emotionName);
        
        if (!this.vrm || !this.blendShapes || this.blendShapes.length === 0) {
            console.log('VRM –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ BlendShapes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        this.resetEmotions();
        
        const emotionBlendShapes = {
            'happy': ['Fcl_ALL_Joy', 'Fcl_ALL_Fun'],
            'sad': ['Fcl_ALL_Sorrow'],
            'angry': ['Fcl_ALL_Angry'],
            'surprised': ['Fcl_ALL_Surprised'],
            'neutral': [], // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è - –±–µ–∑ BlendShapes
            'wink': ['Fcl_EYE_Close_R', 'Fcl_EYE_Close_L'],
            'blink': ['Fcl_EYE_Close']
        };
        
        const blendShapes = emotionBlendShapes[emotionName];
        if (blendShapes) {
            blendShapes.forEach(blendShapeName => {
                this.blendShapes.forEach(mesh => {
                    const index = mesh.morphTargetDictionary[blendShapeName];
                    if (index !== undefined) {
                        mesh.morphTargetInfluences[index] = 1.0;
                        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω BlendShape: ${blendShapeName} –∫ –º–µ—à—É ${mesh.name}`);
                    }
                });
            });
            
            console.log(`–≠–º–æ—Ü–∏—è "${emotionName}" –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.currentEmotion = emotionName;
                this.saveState();
        } else {
            console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–º–æ—Ü–∏—è: ${emotionName}`);
            }
        }
    }

    resetEmotions() {
        console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —ç–º–æ—Ü–∏–∏');
        
        if (!this.vrm || !this.blendShapes || this.blendShapes.length === 0) {
            console.log('VRM –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ BlendShapes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        this.blendShapes.forEach(mesh => {
            if (mesh.morphTargetInfluences) {
                mesh.morphTargetInfluences.fill(0);
            }
        });
        
        console.log('–í—Å–µ —ç–º–æ—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    setupMovementAnimations() {
        this.movementMixer = new THREE.AnimationMixer(this.vrm.scene);
        
        const currentRotation = this.rotationGroup ? this.rotationGroup.rotation.y : 0;
        
        this.setNaturalPose();
        
        this.createIdleAnimation();
        this.createTalkingAnimation();
        this.createActiveTalkingAnimation();
        this.createThinkingAnimation();
        this.createGreetingAnimation();
        this.createBreathingAnimation();
        this.createStretchingAnimation();
        this.createSurpriseAnimation();
        this.createExcitementAnimation();
        this.createListeningAnimation();
        this.createHeadMicroMovements();
        
        if (this.rotationGroup) {
            this.rotationGroup.rotation.y = currentRotation;
        }
        
        this.createMovementControls();
        
        this.createArmControls();
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (this.animationIntegration) {
            try {
                this.animationIntegration.migrateExistingAnimations();
                console.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–π:', error);
                // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        this.playMovement('idle');
            }
        } else {
            console.log('‚ö†Ô∏è –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é');
            this.playMovement('idle');
        }
    }

    setNaturalPose() {
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const leftHand = this.findBoneByName('J_Bip_L_Hand');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        
        const loadedFromStorage = this.loadNaturalPoseFromStorage();
        
        if (this.naturalPose && loadedFromStorage) {
            if (leftArm) leftArm.rotation.copy(this.naturalPose.leftArm);
            if (rightArm) rightArm.rotation.copy(this.naturalPose.rightArm);
            if (leftForeArm) leftForeArm.rotation.copy(this.naturalPose.leftForeArm);
            if (rightForeArm) rightForeArm.rotation.copy(this.naturalPose.rightForeArm);
            if (leftHand) leftHand.rotation.copy(this.naturalPose.leftHand);
            if (rightHand) rightHand.rotation.copy(this.naturalPose.rightHand);
            
            console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞');
        } else {
            if (leftArm) leftArm.rotation.set(0, 0, 1.35);
            if (rightArm) rightArm.rotation.set(0, 0, -1.35);
            if (leftForeArm) leftForeArm.rotation.set(0, 0, 0);
            if (rightForeArm) rightForeArm.rotation.set(0, 0, 0);
            if (leftHand) leftHand.rotation.set(0, 0, 0);
            if (rightHand) rightHand.rotation.set(0, 0, 0);
            
            console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞');
        }
    }

    createIdleAnimation() {
        const idleAnimation = new THREE.AnimationClip('idle', 4, []);

        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const spine = this.findBoneByName('J_Bip_C_Spine'); // –¥–æ–±–∞–≤–∏–º –¥—ã—Ö–∞–Ω–∏–µ

        if (leftArm && rightArm) {
            const leftArmTrack = new THREE.VectorKeyframeTrack(
                `${leftArm.name}.rotation[x]`,
                [0, 1, 2, 3, 4],
                [0, 0.03, 0, -0.03, 0]
            );

            const rightArmTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 1, 2, 3, 4],
                [0, -0.03, 0, 0.03, 0]
            );

            idleAnimation.tracks.push(leftArmTrack, rightArmTrack);
        }

        // === –õ—ë–≥–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ (scale –ø–æ Y –¥–ª—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞) ===
        if (spine) {
            const spineBreathTrack = new THREE.VectorKeyframeTrack(
                `${spine.name}.scale[y]`,
                [0, 1, 2, 3, 4],
                [1, 1.008, 1, 0.992, 1] // –æ—á–µ–Ω—å –Ω–µ–±–æ–ª—å—à–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞
            );
            idleAnimation.tracks.push(spineBreathTrack);
        }

        this.movementAnimations['idle'] = idleAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –ª—ë–≥–∫–∏–º –¥—ã—Ö–∞–Ω–∏–µ–º');
    }

    createTalkingAnimation() {
        const talkingAnimation = new THREE.AnimationClip('talking', 3, []);
        
        const head = this.findBoneByName('J_Bip_C_Head');
        const neck = this.findBoneByName('J_Bip_C_Neck');
        
        if (head) {
            // –ü—Ä–æ—Å—Ç—ã–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            const headTiltTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[z]`,
                [0, 0.5, 1, 1.5, 2, 2.5, 3],
                [0, 0.005, -0.003, 0.008, -0.005, 0.003, 0]
            );
            
            const headNodTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[x]`,
                [0, 0.75, 1.5, 2.25, 3],
                [0, 0.003, -0.001, 0.005, 0]
            );
            
            talkingAnimation.tracks.push(headTiltTrack, headNodTrack);
        }
        
        if (neck) {
            // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —à–µ–∏
            const neckTiltTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[z]`,
                [0, 0.5, 1, 1.5, 2, 2.5, 3],
                [0, 0.003, -0.002, 0.004, -0.003, 0.002, 0]
            );
            
            talkingAnimation.tracks.push(neckTiltTrack);
        }
        
        this.movementAnimations['talking'] = talkingAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ - –ø—Ä–æ—Å—Ç—ã–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è');
    }

    createActiveTalkingAnimation() {
        const activeTalkingAnimation = new THREE.AnimationClip('activeTalking_move', 2, []);
        
        const head = this.findBoneByName('J_Bip_C_Head');
        const neck = this.findBoneByName('J_Bip_C_Neck');
        
        if (head) {
            // –ë–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ—á–∏
            const headTiltTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[z]`,
                [0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],
                [0, 0.01, -0.005, 0.015, -0.01, 0.005, -0.015, 0.01, 0]
            );
            
            const headNodTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[x]`,
                [0, 0.5, 1, 1.5, 2],
                [0, 0.008, -0.003, 0.012, 0]
            );
            
            activeTalkingAnimation.tracks.push(headTiltTrack, headNodTrack);
        }
        
        if (neck) {
            // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —à–µ–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ—á–∏
            const neckTiltTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[z]`,
                [0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],
                [0, 0.006, -0.003, 0.008, -0.005, 0.003, -0.008, 0.005, 0]
            );
            
            activeTalkingAnimation.tracks.push(neckTiltTrack);
        }
        
        this.movementAnimations['activeTalking_move'] = activeTalkingAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    createThinkingAnimation() {
        const thinkingAnimation = new THREE.AnimationClip('thinking_move', 4, []);
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Å—Ç–∏ –≥–æ–ª–æ–≤—ã –∏ —à–µ–∏
        const head = this.findBoneByName('J_Bip_C_Head');
        const neck = this.findBoneByName('J_Bip_C_Neck');
        const spine = this.findBoneByName('J_Bip_C_Spine');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã –≤–±–æ–∫ (–∫–∞–∫ –ø—Ä–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–∏)
        if (head) {
            // –ù–∞–∫–ª–æ–Ω –≥–æ–ª–æ–≤—ã –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ (Z-–æ—Å—å) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
            const headTiltTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[z]`,
                [0, 1, 2, 3, 4],
                [0, 0.05, -0.03, 0.04, 0]
            );
            
            // –õ–µ–≥–∫–∏–π –Ω–∞–∫–ª–æ–Ω –≥–æ–ª–æ–≤—ã –≤–ø–µ—Ä–µ–¥ (X-–æ—Å—å) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
            const headForwardTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[x]`,
                [0, 1, 2, 3, 4],
                [0, 0.02, 0.03, 0.02, 0]
            );
            
            // –õ–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π (Y-–æ—Å—å) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
            const headNodTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[y]`,
                [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4],
                [0, 0.01, -0.005, 0.015, -0.01, 0.005, -0.015, 0.01, 0]
            );
            
            thinkingAnimation.tracks.push(headTiltTrack, headForwardTrack, headNodTrack);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —à–µ–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
        if (neck) {
            // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —à–µ–∏ –≤ —Ç–∞–∫—Ç —Å –≥–æ–ª–æ–≤–æ–π
            const neckTiltTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[z]`,
                [0, 1, 2, 3, 4],
                [0, 0.03, -0.02, 0.025, 0]
            );
            
            const neckForwardTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[x]`,
                [0, 1, 2, 3, 4],
                [0, 0.015, 0.025, 0.015, 0]
            );
            
            thinkingAnimation.tracks.push(neckTiltTrack, neckForwardTrack);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
        if (spine) {
            const spineTrack = new THREE.VectorKeyframeTrack(
                `${spine.name}.rotation[x]`,
                [0, 1, 2, 3, 4],
                [0, 0.01, 0.015, 0.01, 0]
            );
            
            thinkingAnimation.tracks.push(spineTrack);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä—É–∫ (–∫–∞–∫ –±—ã–ª–æ) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        
        if (rightArm && rightForeArm && rightHand) {
            const armTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 1.5, 3, 4],
                [0, -0.3, -0.3, 0]
            );
            
            const foreArmTrack = new THREE.VectorKeyframeTrack(
                `${rightForeArm.name}.rotation[x]`,
                [0, 1.5, 3, 4],
                [0, -0.2, -0.2, 0]
            );
            
            thinkingAnimation.tracks.push(armTrack, foreArmTrack);
        }
        
        this.movementAnimations['thinking_move'] = thinkingAnimation;
        console.log('–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Å –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ –≥–æ–ª–æ–≤—ã –∏ —à–µ–∏) - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createGreetingAnimation() {
        const greetingAnimation = new THREE.AnimationClip('greeting_move', 2, []);
        
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        
        if (rightArm && rightForeArm) {
            const armTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 0.5, 1, 1.5, 2],
                [0, -0.5, -0.5, 0, 0]
            );
            
            const foreArmTrack = new THREE.VectorKeyframeTrack(
                `${rightForeArm.name}.rotation[x]`,
                [0, 0.5, 1, 1.5, 2],
                [0, -0.25, -0.25, 0, 0]
            );
            
            greetingAnimation.tracks.push(armTrack, foreArmTrack);
        }
        
        this.movementAnimations['greeting_move'] = greetingAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createBreathingAnimation() {
        const breathingAnimation = new THREE.AnimationClip('breathing', 3, []);
        
        const spine = this.findBoneByName('J_Bip_C_Spine');
        
        if (spine) {
            const spineTrack = new THREE.VectorKeyframeTrack(
                '.scale[y]',
                [0, 1.5, 3],
                [1, 1.01, 1]
            );
            
            breathingAnimation.tracks.push(spineTrack);
        }
        
        this.movementAnimations['breathing'] = breathingAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –¥—ã—Ö–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createStretchingAnimation() {
        const stretchingAnimation = new THREE.AnimationClip('stretching', 3, []);
        
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        
        if (leftArm && rightArm) {
            const leftArmTrack = new THREE.VectorKeyframeTrack(
                `${leftArm.name}.rotation[x]`,
                [0, 1.5, 3],
                [0, -0.5, 0]
            );
            
            const rightArmTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 1.5, 3],
                [0, -0.5, 0]
            );
            
            stretchingAnimation.tracks.push(leftArmTrack, rightArmTrack);
        }
        
        this.movementAnimations['stretching'] = stretchingAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å—Ç—è–∂–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createSurpriseAnimation() {
        const surpriseAnimation = new THREE.AnimationClip('surprise_move', 1, []);
        
        const head = this.findBoneByName('J_Bip_C_Head');
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        
        if (head) {
            const headTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[y]`,
                [0, 0.5, 1],
                [0, 0.1, 0]
            );
            
            surpriseAnimation.tracks.push(headTrack);
        }
        
        if (leftArm && rightArm) {
            const leftArmTrack = new THREE.VectorKeyframeTrack(
                `${leftArm.name}.rotation[x]`,
                [0, 0.5, 1],
                [0, -0.3, 0]
            );
            
            const rightArmTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 0.5, 1],
                [0, -0.3, 0]
            );
            
            surpriseAnimation.tracks.push(leftArmTrack, rightArmTrack);
        }
        
        this.movementAnimations['surprise_move'] = surpriseAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∏–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createExcitementAnimation() {
        const excitementAnimation = new THREE.AnimationClip('excitement_move', 2, []);
        
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        
        if (leftArm && rightArm) {
            const leftArmTrack = new THREE.VectorKeyframeTrack(
                `${leftArm.name}.rotation[x]`,
                [0, 0.5, 1, 1.5, 2],
                [0, -0.4, 0, -0.4, 0]
            );
            
            const rightArmTrack = new THREE.VectorKeyframeTrack(
                `${rightArm.name}.rotation[x]`,
                [0, 0.5, 1, 1.5, 2],
                [0, -0.4, 0, -0.4, 0]
            );
            
            excitementAnimation.tracks.push(leftArmTrack, rightArmTrack);
        }
        
        this.movementAnimations['excitement_move'] = excitementAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createListeningAnimation() {
        const listeningAnimation = new THREE.AnimationClip('listening', 4, []);
        
        const head = this.findBoneByName('J_Bip_C_Head');
        const spine = this.findBoneByName('J_Bip_C_Spine');
        
        if (head) {
            const headTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[y]`,
                [0, 1, 2, 3, 4],
                [0, 0.03, 0, -0.03, 0]
            );
            
            listeningAnimation.tracks.push(headTrack);
        }
        
        if (spine) {
            const spineTrack = new THREE.VectorKeyframeTrack(
                `${spine.name}.rotation[x]`,
                [0, 2, 4],
                [0, 0.03, 0]
            );
            
            listeningAnimation.tracks.push(spineTrack);
        }
        
        this.movementAnimations['listening'] = listeningAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è —Å–ª—É—à–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    createHeadMicroMovements() {
        const microMovementsAnimation = new THREE.AnimationClip('headMicroMovements', 6, []);
        
        const head = this.findBoneByName('J_Bip_C_Head');
        const neck = this.findBoneByName('J_Bip_C_Neck');
        
        if (head) {
            // –û—á–µ–Ω—å –ª–µ–≥–∫–∏–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
            const headMicroTiltTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[z]`,
                [0, 1, 2, 3, 4, 5, 6],
                [0, 0.008, -0.004, 0.012, -0.008, 0.004, 0]
            );
            
            const headMicroNodTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[x]`,
                [0, 1.5, 3, 4.5, 6],
                [0, 0.005, -0.002, 0.008, 0]
            );
            
            const headMicroTurnTrack = new THREE.VectorKeyframeTrack(
                `${head.name}.rotation[y]`,
                [0, 2, 4, 6],
                [0, 0.003, -0.005, 0]
            );
            
            microMovementsAnimation.tracks.push(headMicroTiltTrack, headMicroNodTrack, headMicroTurnTrack);
        }
        
        if (neck) {
            // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —à–µ–∏ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê
            const neckMicroTiltTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[z]`,
                [0, 1, 2, 3, 4, 5, 6],
                [0, 0.004, -0.002, 0.006, -0.004, 0.002, 0]
            );
            
            const neckMicroNodTrack = new THREE.VectorKeyframeTrack(
                `${neck.name}.rotation[x]`,
                [0, 1.5, 3, 4.5, 6],
                [0, 0.003, -0.001, 0.004, 0]
            );
            
            microMovementsAnimation.tracks.push(neckMicroTiltTrack, neckMicroNodTrack);
        }
        
        this.movementAnimations['headMicroMovements'] = microMovementsAnimation;
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–π –≥–æ–ª–æ–≤—ã —Å–æ–∑–¥–∞–Ω–∞ - –£–ú–ï–ù–¨–®–ï–ù–ù–ê–Ø –ê–ú–ü–õ–ò–¢–£–î–ê');
    }

    findBoneByName(name) {
        if (!this.vrm || !this.vrm.scene) return null;
        let foundBone = null;
        this.vrm.scene.traverse((child) => {
            if (child.isBone && child.name === name) {
                foundBone = child;
            }
        });
        return foundBone;
    }

    createMovementControls() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OBS
        if (window.IS_OBS_MODE) {
            return;
        }

        const controlsContainer = document.querySelector('.controls');
        if (!controlsContainer) {
            return;
        }
        
        const movementGroup = document.createElement('div');
        movementGroup.className = 'control-group';
        movementGroup.innerHTML = `
            <label for="movementSelect">–î–≤–∏–∂–µ–Ω–∏—è:</label>
            <select id="movementSelect">
                <option value="idle">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                <option value="talking">–†–∞–∑–≥–æ–≤–æ—Ä</option>
                <option value="activeTalking_move">–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä</option>
                <option value="thinking_move">–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ</option>
                <option value="greeting_move">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</option>
                <option value="breathing">–î—ã—Ö–∞–Ω–∏–µ</option>
                <option value="stretching">–†–∞—Å—Ç—è–∂–∫–∞</option>
                <option value="surprise_move">–£–¥–∏–≤–ª–µ–Ω–∏–µ</option>
                <option value="excitement_move">–í–æ–ª–Ω–µ–Ω–∏–µ</option>
                <option value="listening">–°–ª—É—à–∞–Ω–∏–µ</option>
                <option value="headMicroMovements">–ú–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–≤—ã</option>
            </select>
        `;
        
        const existingGroups = controlsContainer.querySelectorAll('.control-group');
        const insertAfter = existingGroups[existingGroups.length - 1];
        controlsContainer.insertBefore(movementGroup, insertAfter.nextSibling);
        
        const movementSelect = document.getElementById('movementSelect');
        if (movementSelect) {
            movementSelect.addEventListener('change', (e) => {
                this.playMovement(e.target.value);
            });
        }
    }

    playMovement(movementName) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        if (this.animationIntegration) {
            const result = this.animationIntegration.playMovement(movementName);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveState();
            return result;
        } else {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        if (this.currentMovement) {
            this.movementMixer.stopAllAction();
        }
        
        const animation = this.movementAnimations[movementName];
        if (animation) {
            this.currentMovement = this.movementMixer.clipAction(animation);
            this.currentMovement.play();
                this.currentMovement = movementName;
            console.log(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–≤–∏–∂–µ–Ω–∏–µ: ${movementName}`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.saveState();
        } else {
            console.log(`–î–≤–∏–∂–µ–Ω–∏–µ "${movementName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        }
    }

    resetLight() {
        if (this.lights) {
            this.lights.ambient.intensity = 0.6;
            this.lights.directional.intensity = 1.0;
            this.lights.point.intensity = 0.5;
            
            if (this.controls.lightIntensity) {
                this.controls.lightIntensity.value = 1.0;
            }
            
            console.log('–û—Å–≤–µ—â–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }

    faceCamera() {
        if (this.rotationGroup) {
            this.rotationGroup.rotation.y = 0;
            
            if (this.controls.rotationSpeed) {
                this.controls.rotationSpeed.value = 0;
            }
            
            console.log('–ú–æ–¥–µ–ª—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏—Ü–æ–º –∫ –∫–∞–º–µ—Ä–µ');
        }
    }

    resetAllBones() {
        console.log('üîÑ –°–±—Ä–æ—Å –∫–æ—Å—Ç–µ–π —Ä—É–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ...');
        
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const leftHand = this.findBoneByName('J_Bip_L_Hand');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        
        if (leftArm) leftArm.rotation.set(0, 0, 0.3);
        if (rightArm) rightArm.rotation.set(0, 0, -0.3);
        if (leftForeArm) leftForeArm.rotation.set(0, 0, 0);
        if (rightForeArm) rightForeArm.rotation.set(0, 0, 0);
        if (leftHand) leftHand.rotation.set(0, 0, 0);
        if (rightHand) rightHand.rotation.set(0, 0, 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–∫–∏
        this.updateArmControlSliders();
        
        console.log('‚úÖ –ö–æ—Å—Ç–∏ —Ä—É–∫ —Å–±—Ä–æ—à–µ–Ω—ã –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–∑—É');
    }

    createArmControls() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ OBS
        if (window.IS_OBS_MODE) {
            return;
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º bone controls –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const controlsContainer = document.querySelector('.controls');
        if (!controlsContainer) {
            return;
        }
        
        const armGroup = document.createElement('div');
        armGroup.className = 'control-group';
        // --- –ß–ï–ö–ë–û–ö–° –ü–ê–£–ó–´ –ê–ù–ò–ú–ê–¶–ò–ò ---
        const pauseAnimId = 'pauseAnimationCheckbox';
        armGroup.innerHTML = `
            <div style=\"margin-bottom:10px;\">
                <label style=\"font-size:15px;display:flex;align-items:center;gap:7px;\">
                    <input type=\"checkbox\" id=\"${pauseAnimId}\" style=\"width:18px;height:18px;\">
                    ‚è∏Ô∏è –ü–∞—É–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                </label>
            </div>
            <style>
            .btn-mini { font-size: 15px; padding: 4px 12px; border-radius: 3px; border: 1px solid #ccc; background: #f8f8ff; cursor: pointer; }
            .btn-mini:active { background: #e0e0ff; }
            .btn-reset { color: #a00; border-color: #a00; background: #fff0f0; }
            .arm-section { margin-bottom: 14px; }
            .arm-controls, .leg-controls, .body-controls { margin-bottom: 16px; display: flex; flex-direction: column; gap: 0; }
            .control-group { max-width: 400px; overflow-y: auto; max-height: 70vh; }
            input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
            input[type=number] { -moz-appearance: textfield; }
            </style>
            <h3 style=\"margin: 10px 0 5px 0; color: #223; font-size:15px;\">üßç –ö–æ—Ä–ø—É—Å –∏ –≥–æ–ª–æ–≤–∞</h3>
            <div class=\"body-controls\">
                <div class=\"arm-section\">${boneControlHtml('head', '–ì–æ–ª–æ–≤–∞')}</div>
                <div class=\"arm-section\">${boneControlHtml('neck', '–®–µ—è')}</div>
                <div class=\"arm-section\">${boneControlHtml('chest', '–ì—Ä—É–¥–Ω–∞—è –∫–ª–µ—Ç–∫–∞')}</div>
                <div class=\"arm-section\">${boneControlHtml('hips', '–¢–∞–∑')}</div>
                <div class=\"arm-section\">${boneControlHtml('leftShoulder', '–õ–µ–≤–æ–µ –ø–ª–µ—á–æ')}</div>
                <div class=\"arm-section\">${boneControlHtml('rightShoulder', '–ü—Ä–∞–≤–æ–µ –ø–ª–µ—á–æ')}</div>
            </div>
            <h3 style=\"margin: 10px 0 5px 0; color: #223; font-size:15px;\">ü¶æ –†—É–∫–∏</h3>
            <div class=\"arm-controls\">
                <div class=\"arm-section\">
                    <h4 style=\"margin-bottom:4px; font-size:11px;\">–õ–µ–≤–∞—è —Ä—É–∫–∞</h4>
                    ${boneControlHtml('leftArm', '–ü–ª–µ—á–æ')}
                    ${boneControlHtml('leftForeArm', '–õ–æ–∫–æ—Ç—å')}
                    ${boneControlHtml('leftHand', '–ö–∏—Å—Ç—å')}
                </div>
                <div class=\"arm-section\">
                    <h4 style=\"margin-bottom:4px; font-size:11px;\">–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞</h4>
                    ${boneControlHtml('rightArm', '–ü–ª–µ—á–æ')}
                    ${boneControlHtml('rightForeArm', '–õ–æ–∫–æ—Ç—å')}
                    ${boneControlHtml('rightHand', '–ö–∏—Å—Ç—å')}
                </div>
            </div>
            <h3 style=\"margin: 16px 0 5px 0; color: #223; font-size:15px;\">ü¶ø –ù–æ–≥–∏</h3>
            <div class=\"leg-controls\">
                <div class=\"arm-section\">
                    <h4 style=\"margin-bottom:4px; font-size:11px;\">–õ–µ–≤–∞—è –Ω–æ–≥–∞</h4>
                    ${boneControlHtml('leftLeg', '–ë–µ–¥—Ä–æ')}
                    ${boneControlHtml('leftLowerLeg', '–ì–æ–ª–µ–Ω—å')}
                    ${boneControlHtml('leftFoot', '–°—Ç–æ–ø–∞')}
                </div>
                <div class=\"arm-section\">
                    <h4 style=\"margin-bottom:4px; font-size:11px;\">–ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞</h4>
                    ${boneControlHtml('rightLeg', '–ë–µ–¥—Ä–æ')}
                    ${boneControlHtml('rightLowerLeg', '–ì–æ–ª–µ–Ω—å')}
                    ${boneControlHtml('rightFoot', '–°—Ç–æ–ø–∞')}
                </div>
            </div>
            <div class="arm-buttons" style="margin-top:10px;display:grid;grid-template-columns:1fr;gap:6px;">
                <button class="btn" onclick="window.app.resetAllBones()">üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä—É–∫–∏</button>
                <button class="btn" onclick="window.app.saveAsNaturalPose()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–∑—É</button>
                <button class="btn" onclick="window.app.loadSavedPose()">üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ–∑—É</button>
                <button class="btn" onclick="window.app.resetSavedPose()">üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑—É</button>
                <button class="btn" onclick="window.app.applyToObs()" style="background: #4CAF50; color: white; border-color: #45a049;">üì§ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ OBS</button>
            </div>
        `;
        controlsContainer.appendChild(armGroup);
        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—É–∑—ã ---
        const pauseCheckbox = armGroup.querySelector(`#${pauseAnimId}`);
        this.pauseAnimation = false;
        pauseCheckbox.addEventListener('change', (e) => {
            this.pauseAnimation = pauseCheckbox.checked;
            if (this.pauseAnimation) {
                if (this.movementMixer) this.movementMixer.stopAllAction();
            } else {
                // --- –î–û–ë–ê–í–õ–ï–ù–û: –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∫–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
                this.updateBaseBoneRotationsFromCurrentPose();
                if (this.currentMovement) this.currentMovement.play();
            }
        });
        this.setupLimbControlHandlers();
    }

    setupLimbControlHandlers() {
        // –î–ª—è –≤—Å–µ—Ö input[type=number] –∏ –∫–Ω–æ–ø–æ–∫ +/-/reset
        const axes = ['X','Y','Z'];
        const bones = [
            // –ö–æ—Ä–ø—É—Å –∏ –≥–æ–ª–æ–≤–∞
            'head','neck','chest','hips','leftShoulder','rightShoulder',
            // –õ–µ–≤–∞—è —Ä—É–∫–∞
            'leftArm','leftForeArm','leftHand',
            // –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞
            'rightArm','rightForeArm','rightHand',
            // –õ–µ–≤–∞—è –Ω–æ–≥–∞
            'leftLeg','leftLowerLeg','leftFoot',
            // –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞
            'rightLeg','rightLowerLeg','rightFoot'
        ];
        // input[type=number]
        bones.forEach(bone => {
            axes.forEach(axis => {
                const input = document.getElementById(`${bone}${axis}`);
                if (input) {
                    input.addEventListener('input', () => this.applyLimbControls());
                }
            });
        });
        // –ö–Ω–æ–ø–∫–∏ +/-
        document.querySelectorAll('.btn-mini[data-action="increment"]').forEach(btn => {
            btn.addEventListener('click', e => {
                const bone = btn.getAttribute('data-bone');
                const axis = btn.getAttribute('data-axis');
                const input = document.getElementById(`${bone}${axis}`);
                if (input) {
                    input.value = (parseFloat(input.value) + 0.05).toFixed(2);
                    input.dispatchEvent(new Event('input'));
                }
            });
        });
        document.querySelectorAll('.btn-mini[data-action="decrement"]').forEach(btn => {
            btn.addEventListener('click', e => {
                const bone = btn.getAttribute('data-bone');
                const axis = btn.getAttribute('data-axis');
                const input = document.getElementById(`${bone}${axis}`);
                if (input) {
                    input.value = (parseFloat(input.value) - 0.05).toFixed(2);
                    input.dispatchEvent(new Event('input'));
                }
            });
        });
        // –ö–Ω–æ–ø–∫–∏ reset
        document.querySelectorAll('.btn-reset').forEach(btn => {
            btn.addEventListener('click', e => {
                const bone = btn.getAttribute('data-bone');
                axes.forEach(axis => {
                    const input = document.getElementById(`${bone}${axis}`);
                    if (input) input.value = 0;
                });
                this.applyLimbControls();
            });
        });
    }

    applyLimbControls() {
        if (!this.vrm || !this.vrm.scene) return;
        // –†—É–∫–∏
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const leftHand = this.findBoneByName('J_Bip_L_Hand');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        // –ù–æ–≥–∏
        const leftLeg = this.findBoneByName('J_Bip_L_UpperLeg');
        const rightLeg = this.findBoneByName('J_Bip_R_UpperLeg');
        const leftLowerLeg = this.findBoneByName('J_Bip_L_LowerLeg');
        const rightLowerLeg = this.findBoneByName('J_Bip_R_LowerLeg');
        const leftFoot = this.findBoneByName('J_Bip_L_Foot');
        const rightFoot = this.findBoneByName('J_Bip_R_Foot');
        // –ö–æ—Ä–ø—É—Å –∏ –≥–æ–ª–æ–≤–∞
        const head = this.findBoneByName('J_Bip_C_Head');
        const neck = this.findBoneByName('J_Bip_C_Neck');
        const chest = this.findBoneByName('J_Bip_C_Chest');
        const hips = this.findBoneByName('J_Bip_C_Hips');
        const leftShoulder = this.findBoneByName('J_Bip_L_Shoulder');
        const rightShoulder = this.findBoneByName('J_Bip_R_Shoulder');

        // –°–ø–∏—Å–æ–∫ –∫–æ—Å—Ç–µ–π –∏ –∏—Ö id –¥–ª—è UI
        const bones = [
            { bone: leftArm, prefix: 'leftArm', defZ: 0.3 },
            { bone: rightArm, prefix: 'rightArm', defZ: -0.3 },
            { bone: leftForeArm, prefix: 'leftForeArm' },
            { bone: rightForeArm, prefix: 'rightForeArm' },
            { bone: leftHand, prefix: 'leftHand' },
            { bone: rightHand, prefix: 'rightHand' },
            { bone: leftLeg, prefix: 'leftLeg' },
            { bone: rightLeg, prefix: 'rightLeg' },
            { bone: leftLowerLeg, prefix: 'leftLowerLeg' },
            { bone: rightLowerLeg, prefix: 'rightLowerLeg' },
            { bone: leftFoot, prefix: 'leftFoot' },
            { bone: rightFoot, prefix: 'rightFoot' },
            { bone: head, prefix: 'head' },
            { bone: neck, prefix: 'neck' },
            { bone: chest, prefix: 'chest' },
            { bone: hips, prefix: 'hips' },
            { bone: leftShoulder, prefix: 'leftShoulder' },
            { bone: rightShoulder, prefix: 'rightShoulder' },
        ];

        bones.forEach(({ bone, prefix, defZ }) => {
            if (!bone) return;
            const x = parseFloat(document.getElementById(prefix + 'X')?.value || 0);
            const y = parseFloat(document.getElementById(prefix + 'Y')?.value || 0);
            let z = parseFloat(document.getElementById(prefix + 'Z')?.value || 0);
            if (typeof defZ !== 'undefined' && isNaN(z)) z = defZ;

            if (this.pauseAnimation) {
                // –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                bone.rotation.set(x, y, z);
                
                // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ OBS"
            } else {
                // --- –ù–æ–≤—ã–π —Ñ–∏–∫—Å: offset –≤—Å–µ–≥–¥–∞ –∫ –±–∞–∑–µ –∞–Ω–∏–º–∞—Ü–∏–∏ ---
                if (!this._animationBaseRot) this._animationBaseRot = {};
                if (!this._lastOffset) this._lastOffset = {};
                if (!this._animationBaseRot[prefix]) {
                    this._animationBaseRot[prefix] = { x: 0, y: 0, z: 0 };
                }
                if (!this._lastOffset[prefix]) {
                    this._lastOffset[prefix] = { x: 0, y: 0, z: 0 };
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º "—á–∏—Å—Ç—É—é" –ø–æ–∑—É –∞–Ω–∏–º–∞—Ü–∏–∏ (–±–µ–∑ offset)
                this._animationBaseRot[prefix].x = bone.rotation.x - this._lastOffset[prefix].x;
                this._animationBaseRot[prefix].y = bone.rotation.y - this._lastOffset[prefix].y;
                this._animationBaseRot[prefix].z = bone.rotation.z - this._lastOffset[prefix].z;
                // –ü—Ä–∏–º–µ–Ω—è–µ–º offset –∫ –±–∞–∑–µ
                bone.rotation.x = this._animationBaseRot[prefix].x + x;
                bone.rotation.y = this._animationBaseRot[prefix].y + y;
                bone.rotation.z = this._animationBaseRot[prefix].z + z;
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
                this._lastOffset[prefix] = { x, y, z };
            }
        });
    }

    resetArmControls() {
        const armControls = [
            'leftArmX', 'leftArmY', 'leftArmZ', 'leftForeArmX', 'leftHandX',
            'rightArmX', 'rightArmY', 'rightArmZ', 'rightForeArmX', 'rightHandX'
        ];
        
        armControls.forEach(controlId => {
            const control = document.getElementById(controlId);
            if (control) {
                if (controlId === 'leftArmZ') control.value = 0.3;
                else if (controlId === 'rightArmZ') control.value = -0.3;
                else control.value = 0;
            }
        });
        
        this.applyArmControls();
    }

    updateArmControlSliders() {
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const leftHand = this.findBoneByName('J_Bip_L_Hand');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        
        if (leftArm) {
            const leftArmX = document.getElementById('leftArmX');
            const leftArmY = document.getElementById('leftArmY');
            const leftArmZ = document.getElementById('leftArmZ');
            if (leftArmX) leftArmX.value = leftArm.rotation.x;
            if (leftArmY) leftArmY.value = leftArm.rotation.y;
            if (leftArmZ) leftArmZ.value = leftArm.rotation.z;
        }
        
        if (rightArm) {
            const rightArmX = document.getElementById('rightArmX');
            const rightArmY = document.getElementById('rightArmY');
            const rightArmZ = document.getElementById('rightArmZ');
            if (rightArmX) rightArmX.value = rightArm.rotation.x;
            if (rightArmY) rightArmY.value = rightArm.rotation.y;
            if (rightArmZ) rightArmZ.value = rightArm.rotation.z;
        }
        
        if (leftForeArm) {
            const leftForeArmX = document.getElementById('leftForeArmX');
            if (leftForeArmX) leftForeArmX.value = leftForeArm.rotation.z;
        }
        
        if (rightForeArm) {
            const rightForeArmX = document.getElementById('rightForeArmX');
            if (rightForeArmX) rightForeArmX.value = rightForeArm.rotation.z;
        }
        
        if (leftHand) {
            const leftHandX = document.getElementById('leftHandX');
            if (leftHandX) leftHandX.value = leftHand.rotation.x;
        }
        
        if (rightHand) {
            const rightHandX = document.getElementById('rightHandX');
            if (rightHandX) rightHandX.value = rightHand.rotation.x;
        }
    }

    saveAsNaturalPose() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑—ã –∫–∞–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π...');
        
        const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
        const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
        const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
        const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
        const leftHand = this.findBoneByName('J_Bip_L_Hand');
        const rightHand = this.findBoneByName('J_Bip_R_Hand');
        
        if (leftArm && rightArm) {
            this.naturalPose = {
                leftArm: leftArm.rotation.clone(),
                rightArm: rightArm.rotation.clone(),
                leftForeArm: leftForeArm ? leftForeArm.rotation.clone() : new THREE.Euler(),
                rightForeArm: rightForeArm ? rightForeArm.rotation.clone() : new THREE.Euler(),
                leftHand: leftHand ? leftHand.rotation.clone() : new THREE.Euler(),
                rightHand: rightHand ? rightHand.rotation.clone() : new THREE.Euler()
            };
            
            try {
                localStorage.setItem('naturalPose', JSON.stringify(this.naturalPose));
                console.log('‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
            } catch (error) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑—É –≤ localStorage:', error);
            }
        } else {
            console.log('‚ùå –ö–æ—Å—Ç–∏ —Ä—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑—ã');
        }
    }

    resetSavedPose() {
        console.log('üóëÔ∏è –°–±—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–∑—ã...');
        
        try {
            localStorage.removeItem('naturalPose');
            this.naturalPose = null;
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∞ —É–¥–∞–ª–µ–Ω–∞');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑—É:', error);
        }
    }

    loadNaturalPoseFromStorage() {
        try {
            const savedPose = localStorage.getItem('naturalPose');
            if (savedPose) {
                this.naturalPose = JSON.parse(savedPose);
                console.log('‚úÖ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage');
                return true;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–∑—É:', error);
        }
        return false;
    }

    applyToObs() {
        console.log('üì§ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ OBS...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑—É –≤—Å–µ—Ö –∫–æ—Å—Ç–µ–π
        const bones = [
            { name: 'J_Bip_L_UpperArm', prefix: 'leftArm' },
            { name: 'J_Bip_R_UpperArm', prefix: 'rightArm' },
            { name: 'J_Bip_L_LowerArm', prefix: 'leftForeArm' },
            { name: 'J_Bip_R_LowerArm', prefix: 'rightForeArm' },
            { name: 'J_Bip_L_Hand', prefix: 'leftHand' },
            { name: 'J_Bip_R_Hand', prefix: 'rightHand' },
            { name: 'J_Bip_L_UpperLeg', prefix: 'leftLeg' },
            { name: 'J_Bip_R_UpperLeg', prefix: 'rightLeg' },
            { name: 'J_Bip_L_LowerLeg', prefix: 'leftLowerLeg' },
            { name: 'J_Bip_R_LowerLeg', prefix: 'rightLowerLeg' },
            { name: 'J_Bip_L_Foot', prefix: 'leftFoot' },
            { name: 'J_Bip_R_Foot', prefix: 'rightFoot' },
            { name: 'J_Bip_C_Head', prefix: 'head' },
            { name: 'J_Bip_C_Neck', prefix: 'neck' },
            { name: 'J_Bip_C_Chest', prefix: 'chest' },
            { name: 'J_Bip_C_Hips', prefix: 'hips' },
            { name: 'J_Bip_L_Shoulder', prefix: 'leftShoulder' },
            { name: 'J_Bip_R_Shoulder', prefix: 'rightShoulder' }
        ];
        
        bones.forEach(({ name, prefix }) => {
            const x = parseFloat(document.getElementById(prefix + 'X')?.value || 0);
            const y = parseFloat(document.getElementById(prefix + 'Y')?.value || 0);
            const z = parseFloat(document.getElementById(prefix + 'Z')?.value || 0);
            
            this.sendPoseControl(name, 'x', x);
            this.sendPoseControl(name, 'y', y);
            this.sendPoseControl(name, 'z', z);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
        if (this.controls.cameraDistance) {
            const distance = parseFloat(this.controls.cameraDistance.value);
            this.sendCameraControl('distance', distance);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
        if (this.controls.lightIntensity) {
            const intensity = parseFloat(this.controls.lightIntensity.value);
            this.sendLightControl('intensity', intensity);
        }
        
        console.log('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ OBS');
    }

    setEmotion(emotionName) {
        console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ—Ü–∏—é:', emotionName);
        this.applyEmotion(emotionName);
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–ø—Å–∏–Ω–∫–∞ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
    updateLipsync(delta) {
        const speed = this.lipsyncLerp.speed;
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        Object.keys(this.lipsyncBlendShapes).forEach(key => {
            this.lipsyncLerp.current[key] += (this.lipsyncLerp.target[key] - this.lipsyncLerp.current[key]) * speed;
            this.lipsyncBlendShapes[key] = this.lipsyncLerp.current[key];
        });
        // --- –ú–∏–∫—Ä–æ–¥—Ä–æ–∂–∞–Ω–∏–µ –≥—É–± ---
        const energy = this.lipsyncBlendShapes.energy;
        if (energy > 0.1) {
            // jitter —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ—Ç –æ—Ç–∫—Ä—ã—Ç
            const jitter = (Math.random() - 0.5) * 0.07 * energy;
            // –î–æ–±–∞–≤–ª—è–µ–º jitter –∫ —Å–∞–º–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–ª–∞—Å–Ω–æ–π
            let maxKey = 'Fcl_MTH_A';
            let maxVal = 0;
            for (const k of ['Fcl_MTH_A','Fcl_MTH_I','Fcl_MTH_U','Fcl_MTH_E','Fcl_MTH_O']) {
                if (this.lipsyncBlendShapes[k] > maxVal) {
                    maxVal = this.lipsyncBlendShapes[k];
                    maxKey = k;
                }
            }
            this.lipsyncBlendShapes[maxKey] += jitter;
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            this.lipsyncBlendShapes[maxKey] = Math.max(0, Math.min(1, this.lipsyncBlendShapes[maxKey]));
        }
        // --- –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä—Ç–∞ –ø—Ä–∏ energy < threshold ---
        if (energy < 0.07) {
            ['Fcl_MTH_A','Fcl_MTH_I','Fcl_MTH_U','Fcl_MTH_E','Fcl_MTH_O'].forEach(k => {
                this.lipsyncBlendShapes[k] *= 0.7;
                if (this.lipsyncBlendShapes[k] < 0.01) this.lipsyncBlendShapes[k] = 0;
            });
        }
        // –ü—Ä–∏–º–µ–Ω—è–µ–º blend shapes
        this.applyLipsyncBlendShapes();
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è blend shapes –ª–∏–ø—Å–∏–Ω–∫–∞
    applyLipsyncBlendShapes() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ blend shapes, –∫—Ä–æ–º–µ —Ä—Ç–∞
        this.vrm.scene.traverse((child) => {
            if (child.isMesh && child.morphTargetDictionary) {
                Object.entries(this.lipsyncBlendShapes).forEach(([key, value]) => {
                    if (key === 'energy') return;
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–æ—Ç ‚Äî –µ–≥–æ –ø—Ä–∏–º–µ–Ω–∏–º –Ω–∏–∂–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    if ([
                        'Fcl_MTH_A','Fcl_MTH_I','Fcl_MTH_U','Fcl_MTH_E','Fcl_MTH_O'
                    ].includes(key)) return;
                    const index = child.morphTargetDictionary[key];
                    if (typeof index !== 'undefined') {
                        child.morphTargetInfluences[index] = Math.max(0, Math.min(1, value));
                    }
                });
            }
        });
        // –¢–µ–ø–µ—Ä—å lipsync blend shapes (—Ä–æ—Ç) ‚Äî –≤—Å–µ–≥–¥–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ!
        this.vrm.scene.traverse((child) => {
            if (child.isMesh && child.morphTargetDictionary) {
                ['Fcl_MTH_A','Fcl_MTH_I','Fcl_MTH_U','Fcl_MTH_E','Fcl_MTH_O'].forEach(key => {
                    const index = child.morphTargetDictionary[key];
                    if (typeof index !== 'undefined') {
                        let v = this.lipsyncBlendShapes[key];
                        if (this.lipsyncBlendShapes.energy > 0) {
                            v *= 0.7 + 0.6 * this.lipsyncBlendShapes.energy;
                        }
                        child.morphTargetInfluences[index] = Math.max(0, Math.min(1, v));
                    }
                });
            }
        });
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ª–∏–ø—Å–∏–Ω–∫–∞
    setLipsync(values) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É blend shapes —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        if (this.animationIntegration) {
            return this.animationIntegration.setLipsync(values);
        } else {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        // –ï—Å–ª–∏ –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ = 0, –Ω–æ –µ—Å—Ç—å energy ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ–º A = energy
        const vowels = ['Fcl_MTH_A','Fcl_MTH_I','Fcl_MTH_U','Fcl_MTH_E','Fcl_MTH_O'];
        const allZero = vowels.every(k => !values[k]);
        if (allZero && values.energy > 0) {
            values['Fcl_MTH_A'] = values.energy;
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        Object.keys(this.lipsyncBlendShapes).forEach(key => {
            this.lipsyncLerp.target[key] = values[key] || 0;
        });
        // –ï—Å–ª–∏ energy –Ω–µ –ø—Ä–∏—à—ë–ª ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º –ø–æ –≥–ª–∞—Å–Ω—ã–º
        if (typeof values.energy === 'undefined') {
            this.lipsyncLerp.target.energy = Math.max(
                values['Fcl_MTH_A'] || 0,
                values['Fcl_MTH_I'] || 0,
                values['Fcl_MTH_U'] || 0,
                values['Fcl_MTH_E'] || 0,
                values['Fcl_MTH_O'] || 0
            );
            }
        }
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–ø—Å–∏–Ω–∫–∞
    testLipsync() {
        console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–ø—Å–∏–Ω–∫–∞...');
        
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
        const sequence = [
            { vowel: 'A', value: 0.7 },
            { vowel: 'I', value: 0.5 },
            { vowel: 'U', value: 0.6 },
            { vowel: 'E', value: 0.4 },
            { vowel: 'O', value: 0.8 }
        ];

        let index = 0;
        const interval = setInterval(() => {
            if (index >= sequence.length) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                this.setLipsync({
                    'Fcl_MTH_A': 0,
                    'Fcl_MTH_I': 0,
                    'Fcl_MTH_U': 0,
                    'Fcl_MTH_E': 0,
                    'Fcl_MTH_O': 0
                });
                clearInterval(interval);
                return;
            }

            const current = sequence[index];
            const values = {
                'Fcl_MTH_A': 0,
                'Fcl_MTH_I': 0,
                'Fcl_MTH_U': 0,
                'Fcl_MTH_E': 0,
                'Fcl_MTH_O': 0
            };
            values[`Fcl_MTH_${current.vowel}`] = current.value;

            console.log(`–¢–µ—Å—Ç –ª–∏–ø—Å–∏–Ω–∫–∞: ${current.vowel}`);
            this.setLipsync(values);

            index++;
        }, 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }

    // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===
    
    testOverlappingAnimations() {
        console.log('üé≠ –¢–µ—Å—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π...');
        
        if (this.animationSystem) {
            // –ë–∞–∑–æ–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è + –∂–µ—Å—Ç
            this.animationSystem.playAnimation('idle', this.animationSystem.layers.BASE);
            this.animationSystem.playAnimation('greeting', this.animationSystem.layers.GESTURE);
            
            console.log('‚úÖ –ù–∞–ª–æ–∂–µ–Ω–∏–µ: Idle + Greeting');
        } else {
            console.log('‚ùå –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
    
    testEmotionPriorities() {
        console.log('üé≠ –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —ç–º–æ—Ü–∏–π...');
        
        if (this.blendShapeManager) {
            // –ë–∞–∑–æ–≤–∞—è —ç–º–æ—Ü–∏—è
            this.blendShapeManager.applyEmotion('happy', 0.5, 5);
            
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            this.blendShapeManager.applyEmotion('surprised', 0.8, 8);
            
            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —ç–º–æ—Ü–∏–∏
            setTimeout(() => {
                this.blendShapeManager.applyEmotion('happy', 0.5, 5);
            }, 2000);
            
            console.log('‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: Happy (5) ‚Üí Surprised (8) ‚Üí Happy (5)');
        } else {
            console.log('‚ùå –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ blend shapes –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
    
    testStateMachine() {
        console.log('üé≠ –¢–µ—Å—Ç state machine...');
        
        if (this.stateMachine) {
            // –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            this.stateMachine.transitionTo('talking');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            const allowed = this.stateMachine.getAllowedTransitions();
            console.log('–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:', allowed);
            
            // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.stateMachine.revertToPrevious();
            }, 3000);
            
            console.log('‚úÖ State Machine: Talking ‚Üí Previous State');
        } else {
            console.log('‚ùå State machine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
    
    showDebugInfo() {
        console.log('üé≠ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
        
        if (this.animationSystem) {
            const activeAnimations = this.animationSystem.getActiveAnimations();
            console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:', activeAnimations);
        }
        
        if (this.blendShapeManager) {
            const activeBlendShapes = this.blendShapeManager.getActiveBlendShapes();
            console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ blend shapes:', activeBlendShapes);
        }
        
        if (this.stateMachine) {
            const currentState = this.stateMachine.getCurrentState();
            const allowedTransitions = this.stateMachine.getAllowedTransitions();
            console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', currentState);
            console.log('–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:', allowedTransitions);
        }
        
        console.log('‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
    saveState() {
        try {
            const state = {
                timestamp: Date.now(),
                currentMovement: this.currentMovement || 'idle',
                currentEmotion: this.currentEmotion || null,
                cameraDistance: this.camera.position.z,
                rotationAngle: THREE.MathUtils.radToDeg(this.rotationGroup?.rotation.y || 0),
                lightIntensity: this.lights?.directional?.intensity || 1.0
            };
            
            localStorage.setItem('vrm_overlay_state', JSON.stringify(state));
            console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', state);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
    restoreLastState() {
        try {
            const savedState = localStorage.getItem('vrm_overlay_state');
            if (!savedState) {
                console.log('üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            
            const state = JSON.parse(savedState);
            const timeDiff = Date.now() - state.timestamp;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
            if (timeDiff > 5 * 60 * 1000) {
                console.log('‚è∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º');
                localStorage.removeItem('vrm_overlay_state');
                return;
            }
            
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (state.currentMovement && this.playMovement) {
                setTimeout(() => {
                    this.playMovement(state.currentMovement);
                }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ—Ü–∏—é
            if (state.currentEmotion && this.applyEmotion) {
                setTimeout(() => {
                    this.applyEmotion(state.currentEmotion);
                }, 1500);
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∏ —Å–≤–µ—Ç–∞
            if (this.camera && state.cameraDistance) {
                this.camera.position.z = state.cameraDistance;
            }
            
            if (this.rotationGroup && state.rotationAngle !== undefined) {
                this.rotationGroup.rotation.y = THREE.MathUtils.degToRad(state.rotationAngle);
            }
            
            if (this.lights && state.lightIntensity) {
                this.lights.ambient.intensity = state.lightIntensity * 0.6;
                this.lights.directional.intensity = state.lightIntensity;
                this.lights.point.intensity = state.lightIntensity * 0.5;
            }
            
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    // === –î–û–ë–ê–í–ò–¢–¨ –í –ö–õ–ê–°–° ===
    updateBaseBoneRotationsFromCurrentPose() {
        // –°–ø–∏—Å–æ–∫ –∫–æ—Å—Ç–µ–π, –∫–∞–∫ –≤ applyLimbControls
        const bones = [
            { bone: this.findBoneByName('J_Bip_L_UpperArm'), prefix: 'leftArm' },
            { bone: this.findBoneByName('J_Bip_R_UpperArm'), prefix: 'rightArm' },
            { bone: this.findBoneByName('J_Bip_L_LowerArm'), prefix: 'leftForeArm' },
            { bone: this.findBoneByName('J_Bip_R_LowerArm'), prefix: 'rightForeArm' },
            { bone: this.findBoneByName('J_Bip_L_Hand'), prefix: 'leftHand' },
            { bone: this.findBoneByName('J_Bip_R_Hand'), prefix: 'rightHand' },
            { bone: this.findBoneByName('J_Bip_L_UpperLeg'), prefix: 'leftLeg' },
            { bone: this.findBoneByName('J_Bip_R_UpperLeg'), prefix: 'rightLeg' },
            { bone: this.findBoneByName('J_Bip_L_LowerLeg'), prefix: 'leftLowerLeg' },
            { bone: this.findBoneByName('J_Bip_R_LowerLeg'), prefix: 'rightLowerLeg' },
            { bone: this.findBoneByName('J_Bip_L_Foot'), prefix: 'leftFoot' },
            { bone: this.findBoneByName('J_Bip_R_Foot'), prefix: 'rightFoot' },
            { bone: this.findBoneByName('J_Bip_C_Head'), prefix: 'head' },
            { bone: this.findBoneByName('J_Bip_C_Neck'), prefix: 'neck' },
            { bone: this.findBoneByName('J_Bip_C_Chest'), prefix: 'chest' },
            { bone: this.findBoneByName('J_Bip_C_Hips'), prefix: 'hips' },
            { bone: this.findBoneByName('J_Bip_L_Shoulder'), prefix: 'leftShoulder' },
            { bone: this.findBoneByName('J_Bip_R_Shoulder'), prefix: 'rightShoulder' },
        ];
        this.baseBoneRotations = {};
        bones.forEach(({ bone, prefix }) => {
            if (bone) {
                this.baseBoneRotations[prefix] = {
                    x: bone.rotation.x,
                    y: bone.rotation.y,
                    z: bone.rotation.z
                };
            }
        });
    }

    // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –° OBS ===
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
    sendCameraControl(action, value) {
        if (this.wsClient) {
            this.wsClient.sendMessage({
                type: 'camera_control',
                action: action,
                value: value
            });
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–æ–π
    sendPoseControl(bone, axis, value) {
        if (this.wsClient) {
            this.wsClient.sendMessage({
                type: 'pose_control',
                bone: bone,
                axis: axis,
                value: value
            });
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
    sendLightControl(action, value) {
        if (this.wsClient) {
            this.wsClient.sendMessage({
                type: 'light_control',
                action: action,
                value: value
            });
        }
    }

    loadSavedPose() {
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ–∑—ã –∏–∑ localStorage...');
        
        const loadedFromStorage = this.loadNaturalPoseFromStorage();
        
        if (this.naturalPose && loadedFromStorage) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ–∑—É –∫ –º–æ–¥–µ–ª–∏
            const leftArm = this.findBoneByName('J_Bip_L_UpperArm');
            const rightArm = this.findBoneByName('J_Bip_R_UpperArm');
            const leftForeArm = this.findBoneByName('J_Bip_L_LowerArm');
            const rightForeArm = this.findBoneByName('J_Bip_R_LowerArm');
            const leftHand = this.findBoneByName('J_Bip_L_Hand');
            const rightHand = this.findBoneByName('J_Bip_R_Hand');
            
            if (leftArm) leftArm.rotation.set(this.naturalPose.leftArm.x, this.naturalPose.leftArm.y, this.naturalPose.leftArm.z);
            if (rightArm) rightArm.rotation.set(this.naturalPose.rightArm.x, this.naturalPose.rightArm.y, this.naturalPose.rightArm.z);
            if (leftForeArm) leftForeArm.rotation.set(this.naturalPose.leftForeArm.x, this.naturalPose.leftForeArm.y, this.naturalPose.leftForeArm.z);
            if (rightForeArm) rightForeArm.rotation.set(this.naturalPose.rightForeArm.x, this.naturalPose.rightForeArm.y, this.naturalPose.rightForeArm.z);
            if (leftHand) leftHand.rotation.set(this.naturalPose.leftHand.x, this.naturalPose.leftHand.y, this.naturalPose.leftHand.z);
            if (rightHand) rightHand.rotation.set(this.naturalPose.rightHand.x, this.naturalPose.rightHand.y, this.naturalPose.rightHand.z);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateArmControlSliders();
            
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
        } else {
            console.log('‚ùå –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function setupButtonHandlers() {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫...');
    
    document.querySelectorAll('[data-action]').forEach(button => {
        const action = button.getAttribute('data-action');
        const emotion = button.getAttribute('data-emotion');
        
        button.addEventListener('click', (e) => {
            if (window.app) {
                try {
                    switch(action) {
                        case 'manualBlink':
                            window.app.manualBlink();
                            break;
                        case 'setEmotion':
                            if (emotion) {
                                window.app.setEmotion(emotion);
                            }
                            break;
                        case 'resetEmotions':
                            window.app.resetEmotions();
                            break;
                        default:
                            console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
                }
            } else {
                console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            }
        });
    });
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new VRMStreamingApp();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.app = app;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
setTimeout(setupButtonHandlers, 100);

// --- –≠–ö–°–ü–û–†–¢ –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–• –§–£–ù–ö–¶–ò–ô ---
window.app.setEmotion = (...args) => app.__proto__.setEmotion.apply(app, args);
window.app.manualBlink = (...args) => app.__proto__.manualBlink.apply(app, args);
window.app.resetEmotions = (...args) => app.__proto__.resetEmotions.apply(app, args);

// –≠–∫—Å–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–∞–º–∏
window.app.resetAllBones = (...args) => app.__proto__.resetAllBones.apply(app, args);
window.app.saveAsNaturalPose = (...args) => app.__proto__.saveAsNaturalPose.apply(app, args);
window.app.loadSavedPose = (...args) => app.__proto__.loadSavedPose.apply(app, args);
window.app.resetSavedPose = (...args) => app.__proto__.resetSavedPose.apply(app, args);
window.app.applyToObs = (...args) => app.__proto__.applyToObs.apply(app, args);



// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.app) {
        window.app.saveState();
    }
});

// === –í–ù–ï –ö–õ–ê–°–°–ê ===
function boneControlHtml(prefix, label) {
    return `
        <div style="margin-bottom: 12px; display: flex; flex-direction: column; align-items: flex-start; gap: 4px;">
            <span style="min-width: 60px; font-weight: 500; font-size:15px; margin-bottom:2px;">${label}</span>
            <div style="display: flex; flex-direction: column; gap: 4px;">
                ${['X','Y','Z'].map(axis => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <span style="font-size:15px; width:15px;">${axis}</span>
                        <button type="button" class="btn-mini" data-bone="${prefix}" data-axis="${axis}" data-action="decrement">‚àí</button>
                        <input type="number" id="${prefix}${axis}" min="-2" max="2" step="0.01" value="0" style="width: 56px; font-size:16px; padding:4px 6px; appearance: textfield; -webkit-appearance: textfield;">
                        <button type="button" class="btn-mini" data-bone="${prefix}" data-axis="${axis}" data-action="increment">+</button>
                    </div>
                `).join('')}
            </div>
            <button type="button" class="btn-mini btn-reset" data-bone="${prefix}" data-action="reset" style="margin-top:6px;">reset</button>
        </div>
    `;
}
