/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è VRM
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
 */

class AnimationPrioritySystem {
    constructor(vrmApp) {
        this.vrmApp = vrmApp;
        this.mixer = new THREE.AnimationMixer(vrmApp.vrm.scene);
        
        // –°–ª–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        this.layers = {
            BASE: 0,        // idle, breathing - –±–∞–∑–æ–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            MOVEMENT: 1,    // talking, thinking - –¥–≤–∏–∂–µ–Ω–∏—è
            GESTURE: 2,     // greeting, surprise - –∂–µ—Å—Ç—ã
            EMERGENCY: 3    // interrupt animations - –ø—Ä–µ—Ä—ã–≤–∞—é—â–∏–µ
        };
        
        this.activeAnimations = new Map();
        this.animationClips = new Map();
        this.blendTimes = new Map();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.defaultBlendTime = 0.3;
        this.maxSimultaneousAnimations = 4;
        
        console.log('üé≠ AnimationPrioritySystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ
     */
    registerAnimation(name, clip, priority = this.layers.MOVEMENT, blendTime = this.defaultBlendTime) {
        this.animationClips.set(name, clip);
        this.blendTimes.set(name, blendTime);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏–º–µ–Ω–∏
        if (name.includes('idle') || name.includes('breathing')) {
            priority = this.layers.BASE;
        } else if (name.includes('greeting') || name.includes('surprise')) {
            priority = this.layers.GESTURE;
        }
        
        console.log(`üìù –ê–Ω–∏–º–∞—Ü–∏—è "${name}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}`);
    }
    
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
     */
    playAnimation(name, priority = null, blendTime = null) {
        const clip = this.animationClips.get(name);
        if (!clip) {
            console.warn(`‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return false;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if (priority === null) {
            priority = this.getDefaultPriority(name);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (blendTime === null) {
            blendTime = this.blendTimes.get(name) || this.defaultBlendTime;
        }
        
        console.log(`‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ "${name}" —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ${priority}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –º–µ–Ω—å—à–∏–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        this.stopLowerPriorityAnimations(priority);
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        const action = this.mixer.clipAction(clip);
        action.setEffectiveWeight(1);
        action.setLoop(THREE.LoopRepeat);
        
        // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        if (blendTime > 0) {
            action.fadeIn(blendTime);
        }
        
        action.play();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.activeAnimations.set(priority, {
            name,
            action,
            startTime: Date.now()
        });
        
        return true;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
     */
    stopLowerPriorityAnimations(priority) {
        const toStop = [];
        
        for (const [animPriority, animation] of this.activeAnimations) {
            if (animPriority <= priority) {
                toStop.push(animPriority);
            }
        }
        
        toStop.forEach(priority => {
            const animation = this.activeAnimations.get(priority);
            if (animation) {
                animation.action.fadeOut(0.2);
                setTimeout(() => {
                    animation.action.stop();
                }, 200);
                this.activeAnimations.delete(priority);
                console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è "${animation.name}" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${priority})`);
            }
        });
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
     */
    stopAnimation(name) {
        for (const [priority, animation] of this.activeAnimations) {
            if (animation.name === name) {
                animation.action.fadeOut(0.2);
                setTimeout(() => {
                    animation.action.stop();
                }, 200);
                this.activeAnimations.delete(priority);
                console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è "${name}"`);
                return true;
            }
        }
        return false;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    stopAllAnimations() {
        this.activeAnimations.forEach((animation, priority) => {
            animation.action.fadeOut(0.2);
            setTimeout(() => {
                animation.action.stop();
            }, 200);
        });
        this.activeAnimations.clear();
        console.log('‚èπÔ∏è –í—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    getDefaultPriority(name) {
        if (name.includes('idle') || name.includes('breathing')) {
            return this.layers.BASE;
        } else if (name.includes('talking') || name.includes('thinking')) {
            return this.layers.MOVEMENT;
        } else if (name.includes('greeting') || name.includes('surprise') || name.includes('excitement')) {
            return this.layers.GESTURE;
        } else {
            return this.layers.MOVEMENT;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∏–∫—Å–µ—Ä (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ animate loop)
     */
    update(deltaTime) {
        this.mixer.update(deltaTime);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
     */
    getActiveAnimations() {
        const active = [];
        for (const [priority, animation] of this.activeAnimations) {
            active.push({
                name: animation.name,
                priority,
                duration: Date.now() - animation.startTime
            });
        }
        return active.sort((a, b) => b.priority - a.priority);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è
     */
    isAnimationActive(name) {
        for (const animation of this.activeAnimations.values()) {
            if (animation.name === name) {
                return true;
            }
        }
        return false;
    }
}

class BlendShapeManager {
    constructor(vrmApp) {
        this.vrmApp = vrmApp;
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ blend shapes
        this.categories = {
            EMOTIONS: ['Fcl_HAP_HAP', 'Fcl_SAD_SAD', 'Fcl_ANG_ANG', 'Fcl_SUR_SUR'],
            LIPSYNC: ['Fcl_MTH_A', 'Fcl_MTH_I', 'Fcl_MTH_U', 'Fcl_MTH_E', 'Fcl_MTH_O'],
            BLINKING: ['Fcl_EYE_CLOSE_L', 'Fcl_EYE_CLOSE_R'],
            CUSTOM: []
        };
        
        this.activeShapes = new Map();
        this.priorities = new Map();
        this.transitions = new Map();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.defaultTransitionTime = 0.3;
        this.maxSimultaneousShapes = 10;
        
        console.log('üé≠ BlendShapeManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç blend shape —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
     */
    applyBlendShape(name, value, priority = 0, duration = this.defaultTransitionTime) {
        const target = Math.max(0, Math.min(1, value));
        const current = this.activeShapes.get(name) || 0;
        
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (Math.abs(current - target) < 0.01) {
            return;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ blend shape
        if (this.transitions.has(name)) {
            this.transitions.get(name).stop();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        const tween = new TWEEN.Tween({ value: current })
            .to({ value: target }, duration * 1000)
            .easing(TWEEN.Easing.Quadratic.Out)
            .onUpdate((obj) => {
                this.setBlendShapeValue(name, obj.value);
            })
            .onComplete(() => {
                this.transitions.delete(name);
            });
        
        tween.start();
        this.transitions.set(name, tween);
        this.activeShapes.set(name, target);
        this.priorities.set(name, priority);
        
        console.log(`üé≠ Blend shape "${name}": ${current.toFixed(2)} ‚Üí ${target.toFixed(2)} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${priority})`);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ blend shape –Ω–∞–ø—Ä—è–º—É—é
     */
    setBlendShapeValue(name, value) {
        this.vrmApp.vrm.scene.traverse((child) => {
            if (child.isMesh && child.morphTargetDictionary) {
                const index = child.morphTargetDictionary[name];
                if (typeof index !== 'undefined') {
                    child.morphTargetInfluences[index] = Math.max(0, Math.min(1, value));
                }
            }
        });
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–º–æ—Ü–∏—é —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
     */
    applyEmotion(emotionName, intensity = 1.0, priority = 5) {
        const emotionValues = {
            'happy': { 'Fcl_HAP_HAP': 0.8 * intensity, 'Fcl_SAD_SAD': 0 },
            'sad': { 'Fcl_HAP_HAP': 0, 'Fcl_SAD_SAD': 0.7 * intensity },
            'angry': { 'Fcl_ANG_ANG': 0.8 * intensity },
            'surprised': { 'Fcl_SUR_SUR': 0.8 * intensity },
            'neutral': { 'Fcl_HAP_HAP': 0, 'Fcl_SAD_SAD': 0, 'Fcl_ANG_ANG': 0, 'Fcl_SUR_SUR': 0 }
        };
        
        const values = emotionValues[emotionName];
        if (!values) {
            console.warn(`‚ö†Ô∏è –≠–º–æ—Ü–∏—è "${emotionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ blend shapes –¥–ª—è —ç–º–æ—Ü–∏–∏
        Object.entries(values).forEach(([shapeName, value]) => {
            this.applyBlendShape(shapeName, value, priority, 0.5);
        });
        
        console.log(`üòä –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —ç–º–æ—Ü–∏—è "${emotionName}" —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é ${intensity}`);
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —ç–º–æ—Ü–∏–∏
     */
    resetEmotions() {
        this.categories.EMOTIONS.forEach(shapeName => {
            this.applyBlendShape(shapeName, 0, 0, 0.3);
        });
        console.log('üòä –≠–º–æ—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–ø—Å–∏–Ω–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
     */
    applyLipsync(values, priority = 10) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–∞—Å–Ω—ã–µ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        this.categories.LIPSYNC.forEach(shapeName => {
            const value = values[shapeName] || 0;
            this.applyBlendShape(shapeName, value, priority, 0.1);
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ animate loop)
     */
    update() {
        TWEEN.update();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö blend shapes
     */
    getActiveBlendShapes() {
        const active = [];
        for (const [name, value] of this.activeShapes) {
            if (value > 0.01) {
                active.push({
                    name,
                    value,
                    priority: this.priorities.get(name) || 0
                });
            }
        }
        return active.sort((a, b) => b.priority - a.priority);
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ blend shapes
     */
    clearAll() {
        this.activeShapes.forEach((value, name) => {
            this.applyBlendShape(name, 0, 0, 0.2);
        });
        this.activeShapes.clear();
        this.priorities.clear();
    }
}

class AnimationStateMachine {
    constructor(vrmApp) {
        this.vrmApp = vrmApp;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.states = {
            IDLE: 'idle',
            TALKING: 'talking',
            THINKING: 'thinking',
            GESTURING: 'gesturing',
            EMOTIONAL: 'emotional',
            LISTENING: 'listening'
        };
        
        this.currentState = this.states.IDLE;
        this.previousState = null;
        this.transitions = new Map();
        this.stateAnimations = new Map();
        
        this.setupTransitions();
        this.setupStateAnimations();
        
        console.log('üé≠ AnimationStateMachine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
     */
    setupTransitions() {
        this.transitions.set(this.states.IDLE, [
            this.states.TALKING,
            this.states.THINKING,
            this.states.GESTURING,
            this.states.LISTENING
        ]);
        
        this.transitions.set(this.states.TALKING, [
            this.states.IDLE,
            this.states.EMOTIONAL,
            this.states.GESTURING
        ]);
        
        this.transitions.set(this.states.THINKING, [
            this.states.IDLE,
            this.states.TALKING
        ]);
        
        this.transitions.set(this.states.GESTURING, [
            this.states.IDLE,
            this.states.TALKING
        ]);
        
        this.transitions.set(this.states.EMOTIONAL, [
            this.states.IDLE,
            this.states.TALKING
        ]);
        
        this.transitions.set(this.states.LISTENING, [
            this.states.IDLE,
            this.states.TALKING
        ]);
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateAnimations() {
        this.stateAnimations.set(this.states.IDLE, 'idle');
        this.stateAnimations.set(this.states.TALKING, 'talking');
        this.stateAnimations.set(this.states.THINKING, 'thinking_move');
        this.stateAnimations.set(this.states.GESTURING, 'greeting');
        this.stateAnimations.set(this.states.EMOTIONAL, 'excitement');
        this.stateAnimations.set(this.states.LISTENING, 'listening');
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    transitionTo(newState, blendTime = 0.5) {
        if (!this.canTransitionTo(newState)) {
            console.warn(`‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ "${this.currentState}" –≤ "${newState}" –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
            return false;
        }
        
        const oldState = this.currentState;
        this.previousState = oldState;
        this.currentState = newState;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const animationName = this.stateAnimations.get(newState);
        if (animationName && this.vrmApp.animationSystem) {
            this.vrmApp.animationSystem.playAnimation(animationName, null, blendTime);
        }
        
        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥: ${oldState} ‚Üí ${newState}`);
        return true;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    canTransitionTo(newState) {
        const allowedTransitions = this.transitions.get(this.currentState);
        return allowedTransitions && allowedTransitions.includes(newState);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    revertToPrevious() {
        if (this.previousState) {
            return this.transitionTo(this.previousState);
        }
        return false;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getCurrentState() {
        return this.currentState;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getAllowedTransitions() {
        return this.transitions.get(this.currentState) || [];
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
window.AnimationPrioritySystem = AnimationPrioritySystem;
window.BlendShapeManager = BlendShapeManager;
window.AnimationStateMachine = AnimationStateMachine; 